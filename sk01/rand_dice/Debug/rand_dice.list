
rand_dice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e3c  08003e3c  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e3c  08003e3c  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e3c  08003e3c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e40  08003e40  00004e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003e44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  08003eac  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003eac  000052a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009089  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193e  00000000  00000000  0000e119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ef  00000000  00000000  00010220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d84  00000000  00000000  0001080f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae7b  00000000  00000000  00021593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006166c  00000000  00000000  0002c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008da7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023dc  00000000  00000000  0008dac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0008fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c44 	.word	0x08003c44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003c44 	.word	0x08003c44

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <rand16>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int rand16(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	return (rand() % 6) + 1;
 8000468:	f002 fbd4 	bl	8002c14 <rand>
 800046c:	0003      	movs	r3, r0
 800046e:	2106      	movs	r1, #6
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ffc3 	bl	80003fc <__aeabi_idivmod>
 8000476:	000b      	movs	r3, r1
 8000478:	3301      	adds	r3, #1

}
 800047a:	0018      	movs	r0, r3
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <RollTheDice>:

int RollTheDice(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
	int die1 = rand16();
 8000486:	f7ff ffed 	bl	8000464 <rand16>
 800048a:	0003      	movs	r3, r0
 800048c:	60fb      	str	r3, [r7, #12]
	int die2 = rand16();
 800048e:	f7ff ffe9 	bl	8000464 <rand16>
 8000492:	0003      	movs	r3, r0
 8000494:	60bb      	str	r3, [r7, #8]
	int die3 = rand16();
 8000496:	f7ff ffe5 	bl	8000464 <rand16>
 800049a:	0003      	movs	r3, r0
 800049c:	607b      	str	r3, [r7, #4]

	return (100*die1 + 10*die2 + die3);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2264      	movs	r2, #100	@ 0x64
 80004a2:	435a      	muls	r2, r3
 80004a4:	0011      	movs	r1, r2
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	0013      	movs	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	189b      	adds	r3, r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	18ca      	adds	r2, r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	18d3      	adds	r3, r2, r3
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fcab 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f8c5 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f99f 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f96d 	bl	80007b0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80004d6:	f000 f90f 	bl	80006f8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  sct_init();
 80004da:	f000 fa41 	bl	8000960 <sct_init>
  sct_value(404, 4);
 80004de:	23ca      	movs	r3, #202	@ 0xca
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2104      	movs	r1, #4
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fa83 	bl	80009f0 <sct_value>
  HAL_Delay(2000);
 80004ea:	23fa      	movs	r3, #250	@ 0xfa
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fcfa 	bl	8000ee8 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc);
 80004f4:	4b55      	ldr	r3, [pc, #340]	@ (800064c <main+0x18c>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f834 	bl	8001564 <HAL_ADCEx_Calibration_Start>

  uint16_t adc_value;
  HAL_ADC_Start(&hadc);
 80004fc:	4b53      	ldr	r3, [pc, #332]	@ (800064c <main+0x18c>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fe56 	bl	80011b0 <HAL_ADC_Start>
  adc_value = HAL_ADC_GetValue(&hadc);
 8000504:	4b51      	ldr	r3, [pc, #324]	@ (800064c <main+0x18c>)
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fea6 	bl	8001258 <HAL_ADC_GetValue>
 800050c:	0002      	movs	r2, r0
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	801a      	strh	r2, [r3, #0]
  srand(adc_value);
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	0018      	movs	r0, r3
 8000518:	f002 fb4c 	bl	8002bb4 <srand>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  uint8_t buttonPressed = 0;
 800051c:	230f      	movs	r3, #15
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	  uint16_t rng_led;
	  uint16_t delayValue = 20;
 8000524:	230a      	movs	r3, #10
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	2214      	movs	r2, #20
 800052a:	801a      	strh	r2, [r3, #0]

	  while(buttonPressed == 0)
 800052c:	e01c      	b.n	8000568 <main+0xa8>
	  {
		  rng_led = RollTheDice();
 800052e:	f7ff ffa7 	bl	8000480 <RollTheDice>
 8000532:	0002      	movs	r2, r0
 8000534:	240c      	movs	r4, #12
 8000536:	193b      	adds	r3, r7, r4
 8000538:	801a      	strh	r2, [r3, #0]

		  HAL_Delay(delayValue);
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fcd1 	bl	8000ee8 <HAL_Delay>
		  sct_value(rng_led, 0);
 8000546:	193b      	adds	r3, r7, r4
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	2100      	movs	r1, #0
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fa4f 	bl	80009f0 <sct_value>
		  if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0)
 8000552:	4b3f      	ldr	r3, [pc, #252]	@ (8000650 <main+0x190>)
 8000554:	2102      	movs	r1, #2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fad0 	bl	8001afc <HAL_GPIO_ReadPin>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d103      	bne.n	8000568 <main+0xa8>
		  {
			  buttonPressed = 1;
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
	  while(buttonPressed == 0)
 8000568:	230f      	movs	r3, #15
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0dd      	beq.n	800052e <main+0x6e>
		  }
	  }

	  for(uint16_t i = 0; i < 20; i++)
 8000572:	2308      	movs	r3, #8
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
 800057a:	e01c      	b.n	80005b6 <main+0xf6>
	  {
		  rng_led = RollTheDice();
 800057c:	f7ff ff80 	bl	8000480 <RollTheDice>
 8000580:	0002      	movs	r2, r0
 8000582:	250c      	movs	r5, #12
 8000584:	197b      	adds	r3, r7, r5
 8000586:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(delayValue);
 8000588:	240a      	movs	r4, #10
 800058a:	193b      	adds	r3, r7, r4
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fcaa 	bl	8000ee8 <HAL_Delay>
		  delayValue += 10;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	193a      	adds	r2, r7, r4
 8000598:	8812      	ldrh	r2, [r2, #0]
 800059a:	320a      	adds	r2, #10
 800059c:	801a      	strh	r2, [r3, #0]
		  sct_value(rng_led, 0);
 800059e:	197b      	adds	r3, r7, r5
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fa23 	bl	80009f0 <sct_value>
	  for(uint16_t i = 0; i < 20; i++)
 80005aa:	2108      	movs	r1, #8
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	3201      	adds	r2, #1
 80005b4:	801a      	strh	r2, [r3, #0]
 80005b6:	2308      	movs	r3, #8
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	2b13      	cmp	r3, #19
 80005be:	d9dd      	bls.n	800057c <main+0xbc>
	  }

	  sct_value(rng_led,8);
 80005c0:	240c      	movs	r4, #12
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2108      	movs	r1, #8
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fa11 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	@ 0x64
 80005d0:	f000 fc8a 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,0);
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2100      	movs	r1, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fa08 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	@ 0x64
 80005e2:	f000 fc81 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,8);
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	2108      	movs	r1, #8
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 f9ff 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f000 fc78 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,0);
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	2100      	movs	r1, #0
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f9f6 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f000 fc6f 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,8);
 800060a:	193b      	adds	r3, r7, r4
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	2108      	movs	r1, #8
 8000610:	0018      	movs	r0, r3
 8000612:	f000 f9ed 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	@ 0x64
 8000618:	f000 fc66 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,0);
 800061c:	193b      	adds	r3, r7, r4
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f9e4 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	@ 0x64
 800062a:	f000 fc5d 	bl	8000ee8 <HAL_Delay>
	  sct_value(rng_led,8);
 800062e:	193b      	adds	r3, r7, r4
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2108      	movs	r1, #8
 8000634:	0018      	movs	r0, r3
 8000636:	f000 f9db 	bl	80009f0 <sct_value>
	  HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	@ 0x64
 800063c:	f000 fc54 	bl	8000ee8 <HAL_Delay>

	  HAL_Delay(3000);
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <main+0x194>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fc50 	bl	8000ee8 <HAL_Delay>
  {
 8000648:	e768      	b.n	800051c <main+0x5c>
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	20000084 	.word	0x20000084
 8000650:	48000800 	.word	0x48000800
 8000654:	00000bb8 	.word	0x00000bb8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b091      	sub	sp, #68	@ 0x44
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2410      	movs	r4, #16
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2330      	movs	r3, #48	@ 0x30
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fc21 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	003b      	movs	r3, r7
 8000670:	0018      	movs	r0, r3
 8000672:	2310      	movs	r3, #16
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 fc1a 	bl	8002eb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2212      	movs	r2, #18
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2210      	movs	r2, #16
 8000694:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2210      	movs	r2, #16
 800069a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	22a0      	movs	r2, #160	@ 0xa0
 80006ac:	0392      	lsls	r2, r2, #14
 80006ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fa59 	bl	8001b70 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f947 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	003b      	movs	r3, r7
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2202      	movs	r2, #2
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006de:	003b      	movs	r3, r7
 80006e0:	2101      	movs	r1, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fd5e 	bl	80021a4 <HAL_RCC_ClockConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 f932 	bl	8000954 <Error_Handler>
  }
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b011      	add	sp, #68	@ 0x44
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	0018      	movs	r0, r3
 8000702:	230c      	movs	r3, #12
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 fbd2 	bl	8002eb0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800070c:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800070e:	4a27      	ldr	r2, [pc, #156]	@ (80007ac <MX_ADC_Init+0xb4>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000712:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000718:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000726:	2201      	movs	r2, #1
 8000728:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800072c:	2204      	movs	r2, #4
 800072e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000730:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000738:	2200      	movs	r2, #0
 800073a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800073e:	2200      	movs	r2, #0
 8000740:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000744:	2200      	movs	r2, #0
 8000746:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800074a:	22c2      	movs	r2, #194	@ 0xc2
 800074c:	32ff      	adds	r2, #255	@ 0xff
 800074e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000758:	2224      	movs	r2, #36	@ 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000760:	2201      	movs	r2, #1
 8000762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_ADC_Init+0xb0>)
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fbe2 	bl	8000f30 <HAL_ADC_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f8f0 	bl	8000954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	0552      	lsls	r2, r2, #21
 8000788:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_ADC_Init+0xb0>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fd6d 	bl	8001270 <HAL_ADC_ConfigChannel>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800079a:	f000 f8db 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	20000084 	.word	0x20000084
 80007ac:	40012400 	.word	0x40012400

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	2296      	movs	r2, #150	@ 0x96
 80007be:	0212      	lsls	r2, r2, #8
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fe19 	bl	800242c <HAL_UART_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8a9 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000c4 	.word	0x200000c4
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b08b      	sub	sp, #44	@ 0x2c
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	2414      	movs	r4, #20
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2314      	movs	r3, #20
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f002 fb45 	bl	8002eb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b48      	ldr	r3, [pc, #288]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <MX_GPIO_Init+0x138>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0309      	lsls	r1, r1, #12
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	031b      	lsls	r3, r3, #12
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b41      	ldr	r3, [pc, #260]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b40      	ldr	r3, [pc, #256]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	03c9      	lsls	r1, r1, #15
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b3d      	ldr	r3, [pc, #244]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <MX_GPIO_Init+0x138>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <MX_GPIO_Init+0x138>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b32      	ldr	r3, [pc, #200]	@ (8000948 <MX_GPIO_Init+0x138>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	02c9      	lsls	r1, r1, #11
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <MX_GPIO_Init+0x138>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	02db      	lsls	r3, r3, #11
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2390      	movs	r3, #144	@ 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f949 	bl	8001b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 80008a4:	2387      	movs	r3, #135	@ 0x87
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4828      	ldr	r0, [pc, #160]	@ (800094c <MX_GPIO_Init+0x13c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 f942 	bl	8001b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	0192      	lsls	r2, r2, #6
 80008b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2284      	movs	r2, #132	@ 0x84
 80008be:	0392      	lsls	r2, r2, #14
 80008c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <MX_GPIO_Init+0x140>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 ffa4 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2202      	movs	r2, #2
 80008d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2201      	movs	r2, #1
 80008e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <MX_GPIO_Init+0x140>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	0010      	movs	r0, r2
 80008ee:	f000 ff95 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2220      	movs	r2, #32
 80008f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2201      	movs	r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800090a:	193a      	adds	r2, r7, r4
 800090c:	2390      	movs	r3, #144	@ 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 ff82 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000918:	0021      	movs	r1, r4
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2287      	movs	r2, #135	@ 0x87
 800091e:	00d2      	lsls	r2, r2, #3
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	187b      	adds	r3, r7, r1
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <MX_GPIO_Init+0x13c>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 ff6e 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b00b      	add	sp, #44	@ 0x2c
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	48000400 	.word	0x48000400
 8000950:	48000800 	.word	0x48000800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <sct_init>:
		},
};



void sct_init(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  sct_led(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f803 	bl	8000970 <sct_led>

}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <sct_led>:

void sct_led(uint32_t value){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

	//	uint8_t bit_out = 0;
	//	uint32_t LSB_mask = 0x01;

	for(uint8_t i = 0; i < sizeof(value) * 8; i++){
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e01e      	b.n	80009c0 <sct_led+0x50>

		//		bit_out = value & LSB_mask;

		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1); // Write LSB of value to SDI
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4817      	ldr	r0, [pc, #92]	@ (80009ec <sct_led+0x7c>)
 800098e:	001a      	movs	r2, r3
 8000990:	2110      	movs	r1, #16
 8000992:	f001 f8d0 	bl	8001b36 <HAL_GPIO_WritePin>

		value >>= 1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]

		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <sct_led+0x7c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f8c7 	bl	8001b36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <sct_led+0x7c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 f8c1 	bl	8001b36 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < sizeof(value) * 8; i++){
 80009b4:	210f      	movs	r1, #15
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	3201      	adds	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b1f      	cmp	r3, #31
 80009c8:	d9db      	bls.n	8000982 <sct_led+0x12>
	}

	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <sct_led+0x7c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	2120      	movs	r1, #32
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f8b0 	bl	8001b36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <sct_led+0x7c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f8aa 	bl	8001b36 <HAL_GPIO_WritePin>

}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	48000400 	.word	0x48000400

080009f0 <sct_value>:

void sct_value(uint16_t value, uint8_t led){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	801a      	strh	r2, [r3, #0]
 80009fc:	1d7b      	adds	r3, r7, #5
 80009fe:	1c0a      	adds	r2, r1, #0
 8000a00:	701a      	strb	r2, [r3, #0]

	uint32_t reg = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]

	reg |= reg_values[0][value / 100 % 10];
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2164      	movs	r1, #100	@ 0x64
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fb85 	bl	800011c <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	210a      	movs	r1, #10
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff fc05 	bl	8000228 <__aeabi_uidivmod>
 8000a1e:	000b      	movs	r3, r1
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	001a      	movs	r2, r3
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <sct_value+0xb0>)
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	58d3      	ldr	r3, [r2, r3]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	210a      	movs	r1, #10
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fb70 	bl	800011c <__udivsi3>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	210a      	movs	r1, #10
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fbf0 	bl	8000228 <__aeabi_uidivmod>
 8000a48:	000b      	movs	r3, r1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <sct_value+0xb0>)
 8000a50:	320a      	adds	r2, #10
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	58d3      	ldr	r3, [r2, r3]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 8000a5c:	1dbb      	adds	r3, r7, #6
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	210a      	movs	r1, #10
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fbe0 	bl	8000228 <__aeabi_uidivmod>
 8000a68:	000b      	movs	r3, r1
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <sct_value+0xb0>)
 8000a70:	3214      	adds	r2, #20
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	58d3      	ldr	r3, [r2, r3]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[3][led];
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <sct_value+0xb0>)
 8000a82:	321e      	adds	r2, #30
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	58d3      	ldr	r3, [r2, r3]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

	sct_led(reg);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff6d 	bl	8000970 <sct_led>
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	08003c5c 	.word	0x08003c5c

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	619a      	str	r2, [r3, #24]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	69da      	ldr	r2, [r3, #28]
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0549      	lsls	r1, r1, #21
 8000acc:	430a      	orrs	r2, r1
 8000ace:	61da      	str	r2, [r3, #28]
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_MspInit+0x44>)
 8000ad2:	69da      	ldr	r2, [r3, #28]
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	@ 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	2414      	movs	r4, #20
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	0018      	movs	r0, r3
 8000afa:	2314      	movs	r3, #20
 8000afc:	001a      	movs	r2, r3
 8000afe:	2100      	movs	r1, #0
 8000b00:	f002 f9d6 	bl	8002eb0 <memset>
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12a      	bne.n	8000b64 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	0089      	lsls	r1, r1, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	0309      	lsls	r1, r1, #12
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	031b      	lsls	r3, r3, #12
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2204      	movs	r2, #4
 8000b4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2203      	movs	r2, #3
 8000b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_ADC_MspInit+0x88>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f000 fe5c 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b00b      	add	sp, #44	@ 0x2c
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	40012400 	.word	0x40012400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000800 	.word	0x48000800

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	@ 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2414      	movs	r4, #20
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 f990 	bl	8002eb0 <memset>
  if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_UART_MspInit+0x90>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d132      	bne.n	8000c00 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0289      	lsls	r1, r1, #10
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_UART_MspInit+0x94>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	2390      	movs	r3, #144	@ 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fe0e 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b00b      	add	sp, #44	@ 0x2c
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f93a 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_kill>:

int _kill(int pid, int sig)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c58:	f002 f980 	bl	8002f5c <__errno>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	2216      	movs	r2, #22
 8000c60:	601a      	str	r2, [r3, #0]
  return -1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_exit>:

void _exit (int status)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c76:	2301      	movs	r3, #1
 8000c78:	425a      	negs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff ffe5 	bl	8000c4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	e7fd      	b.n	8000c84 <_exit+0x16>

08000c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9a:	e000      	b.n	8000c9e <_read+0x16>
 8000c9c:	bf00      	nop
 8000c9e:	0001      	movs	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
  }

  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b006      	add	sp, #24
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e009      	b.n	8000ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	e000      	b.n	8000ce2 <_write+0x20>
 8000ce0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf1      	blt.n	8000cd4 <_write+0x12>
  }
  return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b006      	add	sp, #24
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_close>:

int _close(int file)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	425b      	negs	r3, r3
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	0192      	lsls	r2, r2, #6
 8000d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_isatty>:

int _isatty(int file)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f002 f8ea 	bl	8002f5c <__errno>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	425b      	negs	r3, r3
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	18d2      	adds	r2, r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b006      	add	sp, #24
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20002000 	.word	0x20002000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	2000014c 	.word	0x2000014c
 8000dbc:	200002a0 	.word	0x200002a0

08000dc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fff6 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	@ (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f002 f8b5 	bl	8002f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fb5f 	bl	80004c0 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e10:	08003e44 	.word	0x08003e44
  ldr r2, =_sbss
 8000e14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e18:	200002a0 	.word	0x200002a0

08000e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_IRQHandler>
	...

08000e20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_Init+0x24>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_Init+0x24>)
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f809 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff fe35 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_InitTick+0x5c>)
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0019      	movs	r1, r3
 8000e5a:	23fa      	movs	r3, #250	@ 0xfa
 8000e5c:	0098      	lsls	r0, r3, #2
 8000e5e:	f7ff f95d 	bl	800011c <__udivsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	0019      	movs	r1, r3
 8000e66:	0020      	movs	r0, r4
 8000e68:	f7ff f958 	bl	800011c <__udivsi3>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 fcc7 	bl	8001802 <HAL_SYSTICK_Config>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00f      	b.n	8000e9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d80b      	bhi.n	8000e9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fca4 	bl	80017d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_InitTick+0x64>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	18d2      	adds	r2, r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000150 	.word	0x20000150

08000ed4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	@ (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	20000150 	.word	0x20000150

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	189b      	adds	r3, r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e125      	b.n	800119a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2234      	movs	r2, #52	@ 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fdc0 	bl	8000aec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f70:	2210      	movs	r2, #16
 8000f72:	4013      	ands	r3, r2
 8000f74:	d000      	beq.n	8000f78 <HAL_ADC_Init+0x48>
 8000f76:	e103      	b.n	8001180 <HAL_ADC_Init+0x250>
 8000f78:	230f      	movs	r3, #15
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d000      	beq.n	8000f84 <HAL_ADC_Init+0x54>
 8000f82:	e0fd      	b.n	8001180 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f8e:	d000      	beq.n	8000f92 <HAL_ADC_Init+0x62>
 8000f90:	e0f6      	b.n	8001180 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f96:	4a83      	ldr	r2, [pc, #524]	@ (80011a4 <HAL_ADC_Init+0x274>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d112      	bne.n	8000fd6 <HAL_ADC_Init+0xa6>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d009      	beq.n	8000fd2 <HAL_ADC_Init+0xa2>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	401a      	ands	r2, r3
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Init+0xa6>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_ADC_Init+0xa8>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d116      	bne.n	800100a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2218      	movs	r2, #24
 8000fe4:	4393      	bics	r3, r2
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	0899      	lsrs	r1, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4964      	ldr	r1, [pc, #400]	@ (80011a8 <HAL_ADC_Init+0x278>)
 8001016:	400a      	ands	r2, r1
 8001018:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e1b      	ldrb	r3, [r3, #24]
 800101e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e5b      	ldrb	r3, [r3, #25]
 8001024:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001026:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e9b      	ldrb	r3, [r3, #26]
 800102c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800102e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001034:	2b01      	cmp	r3, #1
 8001036:	d002      	beq.n	800103e <HAL_ADC_Init+0x10e>
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	e000      	b.n	8001040 <HAL_ADC_Init+0x110>
 800103e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001040:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001046:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d101      	bne.n	8001054 <HAL_ADC_Init+0x124>
 8001050:	2304      	movs	r3, #4
 8001052:	e000      	b.n	8001056 <HAL_ADC_Init+0x126>
 8001054:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001056:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2124      	movs	r1, #36	@ 0x24
 800105c:	5c5b      	ldrb	r3, [r3, r1]
 800105e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001060:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4313      	orrs	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7edb      	ldrb	r3, [r3, #27]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d115      	bne.n	800109c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e9b      	ldrb	r3, [r3, #26]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	0252      	lsls	r2, r2, #9
 800107e:	4313      	orrs	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	e00b      	b.n	800109c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001088:	2220      	movs	r2, #32
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001094:	2201      	movs	r2, #1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	23c2      	movs	r3, #194	@ 0xc2
 80010a2:	33ff      	adds	r3, #255	@ 0xff
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d007      	beq.n	80010b8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010b0:	4313      	orrs	r3, r2
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68d9      	ldr	r1, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	055b      	lsls	r3, r3, #21
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d01b      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d017      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d013      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d00f      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00b      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d007      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001100:	2b06      	cmp	r3, #6
 8001102:	d003      	beq.n	800110c <HAL_ADC_Init+0x1dc>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001108:	2b07      	cmp	r3, #7
 800110a:	d112      	bne.n	8001132 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2107      	movs	r1, #7
 8001118:	438a      	bics	r2, r1
 800111a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6959      	ldr	r1, [r3, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001126:	2207      	movs	r2, #7
 8001128:	401a      	ands	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_ADC_Init+0x27c>)
 800113a:	4013      	ands	r3, r2
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	429a      	cmp	r2, r3
 8001140:	d10b      	bne.n	800115a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114c:	2203      	movs	r2, #3
 800114e:	4393      	bics	r3, r2
 8001150:	2201      	movs	r2, #1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001158:	e01c      	b.n	8001194 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115e:	2212      	movs	r2, #18
 8001160:	4393      	bics	r3, r2
 8001162:	2210      	movs	r2, #16
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800116e:	2201      	movs	r2, #1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800117e:	e009      	b.n	8001194 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001184:	2210      	movs	r2, #16
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	fffffefd 	.word	0xfffffefd
 80011a8:	fffe0219 	.word	0xfffe0219
 80011ac:	833fffe7 	.word	0x833fffe7

080011b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2204      	movs	r2, #4
 80011c8:	4013      	ands	r3, r2
 80011ca:	d138      	bne.n	800123e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2234      	movs	r2, #52	@ 0x34
 80011d0:	5c9b      	ldrb	r3, [r3, r2]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x2a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e038      	b.n	800124c <HAL_ADC_Start+0x9c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2234      	movs	r2, #52	@ 0x34
 80011de:	2101      	movs	r1, #1
 80011e0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7e5b      	ldrb	r3, [r3, #25]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d007      	beq.n	80011fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fc      	adds	r4, r7, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 f933 	bl	800145c <ADC_Enable>
 80011f6:	0003      	movs	r3, r0
 80011f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d120      	bne.n	8001246 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <HAL_ADC_Start+0xa4>)
 800120a:	4013      	ands	r3, r2
 800120c:	2280      	movs	r2, #128	@ 0x80
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2234      	movs	r2, #52	@ 0x34
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	221c      	movs	r2, #28
 800122a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2104      	movs	r1, #4
 8001238:	430a      	orrs	r2, r1
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	e003      	b.n	8001246 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800123e:	230f      	movs	r3, #15
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b005      	add	sp, #20
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	fffff0fe 	.word	0xfffff0fe

08001258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	055b      	lsls	r3, r3, #21
 800128e:	429a      	cmp	r2, r3
 8001290:	d011      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x46>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00d      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x46>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d009      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x46>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d005      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x46>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d001      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x46>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2234      	movs	r2, #52	@ 0x34
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x54>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e0bb      	b.n	800143c <HAL_ADC_ConfigChannel+0x1cc>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2234      	movs	r2, #52	@ 0x34
 80012c8:	2101      	movs	r1, #1
 80012ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2204      	movs	r2, #4
 80012d4:	4013      	ands	r3, r2
 80012d6:	d000      	beq.n	80012da <HAL_ADC_ConfigChannel+0x6a>
 80012d8:	e09f      	b.n	800141a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a59      	ldr	r2, [pc, #356]	@ (8001444 <HAL_ADC_ConfigChannel+0x1d4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x76>
 80012e4:	e077      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	055b      	lsls	r3, r3, #21
 8001304:	429a      	cmp	r2, r3
 8001306:	d037      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d033      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	2b02      	cmp	r3, #2
 8001316:	d02f      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	2b03      	cmp	r3, #3
 800131e:	d02b      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	2b04      	cmp	r3, #4
 8001326:	d027      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132c:	2b05      	cmp	r3, #5
 800132e:	d023      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	2b06      	cmp	r3, #6
 8001336:	d01f      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	2b07      	cmp	r3, #7
 800133e:	d01b      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2107      	movs	r1, #7
 800134c:	400b      	ands	r3, r1
 800134e:	429a      	cmp	r2, r3
 8001350:	d012      	beq.n	8001378 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2107      	movs	r1, #7
 800135e:	438a      	bics	r2, r1
 8001360:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6959      	ldr	r1, [r3, #20]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2207      	movs	r2, #7
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b10      	cmp	r3, #16
 800137e:	d003      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x118>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b11      	cmp	r3, #17
 8001386:	d152      	bne.n	800142e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_ADC_ConfigChannel+0x1d8>)
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b10      	cmp	r3, #16
 8001392:	d102      	bne.n	800139a <HAL_ADC_ConfigChannel+0x12a>
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	e001      	b.n	800139e <HAL_ADC_ConfigChannel+0x12e>
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	03db      	lsls	r3, r3, #15
 800139e:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <HAL_ADC_ConfigChannel+0x1d8>)
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d140      	bne.n	800142e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ac:	4b27      	ldr	r3, [pc, #156]	@ (800144c <HAL_ADC_ConfigChannel+0x1dc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4927      	ldr	r1, [pc, #156]	@ (8001450 <HAL_ADC_ConfigChannel+0x1e0>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe feb2 	bl	800011c <__udivsi3>
 80013b8:	0003      	movs	r3, r0
 80013ba:	001a      	movs	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	189b      	adds	r3, r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c6:	e002      	b.n	80013ce <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x158>
 80013d4:	e02b      	b.n	800142e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	4099      	lsls	r1, r3
 80013e4:	000b      	movs	r3, r1
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x190>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d116      	bne.n	800142e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_ADC_ConfigChannel+0x1d8>)
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b10      	cmp	r3, #16
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1a0>
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_ADC_ConfigChannel+0x1e4>)
 800140e:	e000      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1a2>
 8001410:	4a11      	ldr	r2, [pc, #68]	@ (8001458 <HAL_ADC_ConfigChannel+0x1e8>)
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_ADC_ConfigChannel+0x1d8>)
 8001414:	400a      	ands	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e009      	b.n	800142e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141e:	2220      	movs	r2, #32
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001426:	230f      	movs	r3, #15
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2234      	movs	r2, #52	@ 0x34
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	781b      	ldrb	r3, [r3, #0]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}
 8001444:	00001001 	.word	0x00001001
 8001448:	40012708 	.word	0x40012708
 800144c:	20000000 	.word	0x20000000
 8001450:	000f4240 	.word	0x000f4240
 8001454:	ff7fffff 	.word	0xff7fffff
 8001458:	ffbfffff 	.word	0xffbfffff

0800145c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2203      	movs	r2, #3
 8001474:	4013      	ands	r3, r2
 8001476:	2b01      	cmp	r3, #1
 8001478:	d112      	bne.n	80014a0 <ADC_Enable+0x44>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	2b01      	cmp	r3, #1
 8001486:	d009      	beq.n	800149c <ADC_Enable+0x40>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	401a      	ands	r2, r3
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	429a      	cmp	r2, r3
 800149a:	d101      	bne.n	80014a0 <ADC_Enable+0x44>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <ADC_Enable+0x46>
 80014a0:	2300      	movs	r3, #0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d152      	bne.n	800154c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001558 <ADC_Enable+0xfc>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	d00d      	beq.n	80014ce <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b6:	2210      	movs	r2, #16
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c2:	2201      	movs	r2, #1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e03f      	b.n	800154e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014de:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <ADC_Enable+0x100>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	491f      	ldr	r1, [pc, #124]	@ (8001560 <ADC_Enable+0x104>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7fe fe19 	bl	800011c <__udivsi3>
 80014ea:	0003      	movs	r3, r0
 80014ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014ee:	e002      	b.n	80014f6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014fc:	f7ff fcea 	bl	8000ed4 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001504:	e01b      	b.n	800153e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001506:	f7ff fce5 	bl	8000ed4 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d914      	bls.n	800153e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	2b01      	cmp	r3, #1
 8001520:	d00d      	beq.n	800153e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001526:	2210      	movs	r2, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001532:	2201      	movs	r2, #1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e007      	b.n	800154e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	2b01      	cmp	r3, #1
 800154a:	d1dc      	bne.n	8001506 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b004      	add	sp, #16
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	80000017 	.word	0x80000017
 800155c:	20000000 	.word	0x20000000
 8001560:	000f4240 	.word	0x000f4240

08001564 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2317      	movs	r3, #23
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2234      	movs	r2, #52	@ 0x34
 8001580:	5c9b      	ldrb	r3, [r3, r2]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADCEx_Calibration_Start+0x26>
 8001586:	2302      	movs	r3, #2
 8001588:	e08d      	b.n	80016a6 <HAL_ADCEx_Calibration_Start+0x142>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2234      	movs	r2, #52	@ 0x34
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2203      	movs	r2, #3
 800159a:	4013      	ands	r3, r2
 800159c:	2b01      	cmp	r3, #1
 800159e:	d112      	bne.n	80015c6 <HAL_ADCEx_Calibration_Start+0x62>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d009      	beq.n	80015c2 <HAL_ADCEx_Calibration_Start+0x5e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	401a      	ands	r2, r3
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	429a      	cmp	r2, r3
 80015c0:	d101      	bne.n	80015c6 <HAL_ADCEx_Calibration_Start+0x62>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_ADCEx_Calibration_Start+0x64>
 80015c6:	2300      	movs	r3, #0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d15b      	bne.n	8001684 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d0:	4a37      	ldr	r2, [pc, #220]	@ (80016b0 <HAL_ADCEx_Calibration_Start+0x14c>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	2202      	movs	r2, #2
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2103      	movs	r1, #3
 80015f4:	438a      	bics	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	0609      	lsls	r1, r1, #24
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800160a:	f7ff fc63 	bl	8000ed4 <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001612:	e01d      	b.n	8001650 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001614:	f7ff fc5e 	bl	8000ed4 <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d916      	bls.n	8001650 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	0fdb      	lsrs	r3, r3, #31
 800162a:	07da      	lsls	r2, r3, #31
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	429a      	cmp	r2, r3
 8001632:	d10d      	bne.n	8001650 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001638:	2212      	movs	r2, #18
 800163a:	4393      	bics	r3, r2
 800163c:	2210      	movs	r2, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2234      	movs	r2, #52	@ 0x34
 8001648:	2100      	movs	r1, #0
 800164a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e02a      	b.n	80016a6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	0fdb      	lsrs	r3, r3, #31
 8001658:	07da      	lsls	r2, r3, #31
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	429a      	cmp	r2, r3
 8001660:	d0d8      	beq.n	8001614 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68d9      	ldr	r1, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	430a      	orrs	r2, r1
 8001670:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	2203      	movs	r2, #3
 8001678:	4393      	bics	r3, r2
 800167a:	2201      	movs	r2, #1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38
 8001682:	e009      	b.n	8001698 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001688:	2220      	movs	r2, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001690:	2317      	movs	r3, #23
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2234      	movs	r2, #52	@ 0x34
 800169c:	2100      	movs	r1, #0
 800169e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016a0:	2317      	movs	r3, #23
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	781b      	ldrb	r3, [r3, #0]
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b006      	add	sp, #24
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	fffffefd 	.word	0xfffffefd

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016c8:	d828      	bhi.n	800171c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001788 <__NVIC_SetPriority+0xd4>)
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	33c0      	adds	r3, #192	@ 0xc0
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	589b      	ldr	r3, [r3, r2]
 80016da:	1dfa      	adds	r2, r7, #7
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	0011      	movs	r1, r2
 80016e0:	2203      	movs	r2, #3
 80016e2:	400a      	ands	r2, r1
 80016e4:	00d2      	lsls	r2, r2, #3
 80016e6:	21ff      	movs	r1, #255	@ 0xff
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	019b      	lsls	r3, r3, #6
 80016f6:	22ff      	movs	r2, #255	@ 0xff
 80016f8:	401a      	ands	r2, r3
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	2303      	movs	r3, #3
 8001702:	4003      	ands	r3, r0
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	481f      	ldr	r0, [pc, #124]	@ (8001788 <__NVIC_SetPriority+0xd4>)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	430a      	orrs	r2, r1
 8001714:	33c0      	adds	r3, #192	@ 0xc0
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800171a:	e031      	b.n	8001780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <__NVIC_SetPriority+0xd8>)
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0019      	movs	r1, r3
 8001724:	230f      	movs	r3, #15
 8001726:	400b      	ands	r3, r1
 8001728:	3b08      	subs	r3, #8
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3306      	adds	r3, #6
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	18d3      	adds	r3, r2, r3
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1dfa      	adds	r2, r7, #7
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	0011      	movs	r1, r2
 800173c:	2203      	movs	r2, #3
 800173e:	400a      	ands	r2, r1
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	21ff      	movs	r1, #255	@ 0xff
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	43d2      	mvns	r2, r2
 800174a:	401a      	ands	r2, r3
 800174c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	22ff      	movs	r2, #255	@ 0xff
 8001754:	401a      	ands	r2, r3
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	0018      	movs	r0, r3
 800175c:	2303      	movs	r3, #3
 800175e:	4003      	ands	r3, r0
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	4809      	ldr	r0, [pc, #36]	@ (800178c <__NVIC_SetPriority+0xd8>)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	001c      	movs	r4, r3
 800176c:	230f      	movs	r3, #15
 800176e:	4023      	ands	r3, r4
 8001770:	3b08      	subs	r3, #8
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	430a      	orrs	r2, r1
 8001776:	3306      	adds	r3, #6
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	18c3      	adds	r3, r0, r3
 800177c:	3304      	adds	r3, #4
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b003      	add	sp, #12
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	045b      	lsls	r3, r3, #17
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d301      	bcc.n	80017a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a4:	2301      	movs	r3, #1
 80017a6:	e010      	b.n	80017ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <SysTick_Config+0x44>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	3a01      	subs	r2, #1
 80017ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b0:	2301      	movs	r3, #1
 80017b2:	425b      	negs	r3, r3
 80017b4:	2103      	movs	r1, #3
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff ff7c 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <SysTick_Config+0x44>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <SysTick_Config+0x44>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	210f      	movs	r1, #15
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	1c02      	adds	r2, r0, #0
 80017e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff ffbf 	bl	8001790 <SysTick_Config>
 8001812:	0003      	movs	r3, r0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e14f      	b.n	8001acc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <HAL_GPIO_Init+0x28>
 8001842:	e140      	b.n	8001ac6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	409a      	lsls	r2, r3
 800186a:	0013      	movs	r3, r2
 800186c:	43da      	mvns	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	0013      	movs	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	2201      	movs	r2, #1
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	58d3      	ldr	r3, [r2, r3]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2207      	movs	r2, #7
 8001918:	4013      	ands	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	43da      	mvns	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2107      	movs	r1, #7
 8001932:	400b      	ands	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	401a      	ands	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	23c0      	movs	r3, #192	@ 0xc0
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d100      	bne.n	8001990 <HAL_GPIO_Init+0x174>
 800198e:	e09a      	b.n	8001ac6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b54      	ldr	r3, [pc, #336]	@ (8001ae4 <HAL_GPIO_Init+0x2c8>)
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	4b53      	ldr	r3, [pc, #332]	@ (8001ae4 <HAL_GPIO_Init+0x2c8>)
 8001996:	2101      	movs	r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	4b51      	ldr	r3, [pc, #324]	@ (8001ae4 <HAL_GPIO_Init+0x2c8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <HAL_GPIO_Init+0x2cc>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	589b      	ldr	r3, [r3, r2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4013      	ands	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	43da      	mvns	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	2390      	movs	r3, #144	@ 0x90
 80019d0:	05db      	lsls	r3, r3, #23
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0x1e2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a44      	ldr	r2, [pc, #272]	@ (8001aec <HAL_GPIO_Init+0x2d0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x1de>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a43      	ldr	r2, [pc, #268]	@ (8001af0 <HAL_GPIO_Init+0x2d4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d007      	beq.n	80019f6 <HAL_GPIO_Init+0x1da>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <HAL_GPIO_Init+0x2d8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_GPIO_Init+0x1d6>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019f2:	2305      	movs	r3, #5
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fe:	2300      	movs	r3, #0
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	2103      	movs	r1, #3
 8001a04:	400a      	ands	r2, r1
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	@ (8001ae8 <HAL_GPIO_Init+0x2cc>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	035b      	lsls	r3, r3, #13
 8001a36:	4013      	ands	r3, r2
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43da      	mvns	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	039b      	lsls	r3, r3, #14
 8001a60:	4013      	ands	r3, r2
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	029b      	lsls	r3, r3, #10
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	025b      	lsls	r3, r3, #9
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	40da      	lsrs	r2, r3
 8001ad4:	1e13      	subs	r3, r2, #0
 8001ad6:	d000      	beq.n	8001ada <HAL_GPIO_Init+0x2be>
 8001ad8:	e6a8      	b.n	800182c <HAL_GPIO_Init+0x10>
  } 
}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b006      	add	sp, #24
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000c00 	.word	0x48000c00
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	000a      	movs	r2, r1
 8001b06:	1cbb      	adds	r3, r7, #2
 8001b08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	1cba      	adds	r2, r7, #2
 8001b10:	8812      	ldrh	r2, [r2, #0]
 8001b12:	4013      	ands	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b16:	230f      	movs	r3, #15
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e003      	b.n	8001b28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
  }
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	0008      	movs	r0, r1
 8001b40:	0011      	movs	r1, r2
 8001b42:	1cbb      	adds	r3, r7, #2
 8001b44:	1c02      	adds	r2, r0, #0
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	1c7b      	adds	r3, r7, #1
 8001b4a:	1c0a      	adds	r2, r1, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4e:	1c7b      	adds	r3, r7, #1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	1cbb      	adds	r3, r7, #2
 8001b58:	881a      	ldrh	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b60:	1cbb      	adds	r3, r7, #2
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e301      	b.n	8002186 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1e>
 8001b8c:	e08d      	b.n	8001caa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b8e:	4bc3      	ldr	r3, [pc, #780]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	220c      	movs	r2, #12
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00e      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b9a:	4bc0      	ldr	r3, [pc, #768]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x64>
 8001ba6:	4bbd      	ldr	r3, [pc, #756]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	025b      	lsls	r3, r3, #9
 8001bae:	401a      	ands	r2, r3
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4bb8      	ldr	r3, [pc, #736]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x56>
 8001bc4:	e070      	b.n	8001ca8 <HAL_RCC_OscConfig+0x138>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d000      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x60>
 8001bce:	e06b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e2d8      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x7c>
 8001bdc:	4baf      	ldr	r3, [pc, #700]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4bae      	ldr	r3, [pc, #696]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	0249      	lsls	r1, r1, #9
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e02f      	b.n	8001c4c <HAL_RCC_OscConfig+0xdc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x9e>
 8001bf4:	4ba9      	ldr	r3, [pc, #676]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	49a9      	ldr	r1, [pc, #676]	@ (8001ea0 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	4ba6      	ldr	r3, [pc, #664]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4ba5      	ldr	r3, [pc, #660]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c06:	49a7      	ldr	r1, [pc, #668]	@ (8001ea4 <HAL_RCC_OscConfig+0x334>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e01e      	b.n	8001c4c <HAL_RCC_OscConfig+0xdc>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d10e      	bne.n	8001c34 <HAL_RCC_OscConfig+0xc4>
 8001c16:	4ba1      	ldr	r3, [pc, #644]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4ba0      	ldr	r3, [pc, #640]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	2180      	movs	r1, #128	@ 0x80
 8001c1e:	02c9      	lsls	r1, r1, #11
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b9d      	ldr	r3, [pc, #628]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b9c      	ldr	r3, [pc, #624]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	0249      	lsls	r1, r1, #9
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xdc>
 8001c34:	4b99      	ldr	r3, [pc, #612]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b98      	ldr	r3, [pc, #608]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	4999      	ldr	r1, [pc, #612]	@ (8001ea0 <HAL_RCC_OscConfig+0x330>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4b96      	ldr	r3, [pc, #600]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b95      	ldr	r3, [pc, #596]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c46:	4997      	ldr	r1, [pc, #604]	@ (8001ea4 <HAL_RCC_OscConfig+0x334>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d014      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f93e 	bl	8000ed4 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f939 	bl	8000ed4 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	@ 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e28a      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c70:	4b8a      	ldr	r3, [pc, #552]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0xee>
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f929 	bl	8000ed4 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff f924 	bl	8000ed4 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e275      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b80      	ldr	r3, [pc, #512]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	029b      	lsls	r3, r3, #10
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x118>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x146>
 8001cb4:	e069      	b.n	8001d8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cb6:	4b79      	ldr	r3, [pc, #484]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	220c      	movs	r2, #12
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cc0:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d11c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x196>
 8001ccc:	4b73      	ldr	r3, [pc, #460]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	025b      	lsls	r3, r3, #9
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d116      	bne.n	8001d06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd8:	4b70      	ldr	r3, [pc, #448]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e24b      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b6b      	ldr	r3, [pc, #428]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	22f8      	movs	r2, #248	@ 0xf8
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00da      	lsls	r2, r3, #3
 8001cfe:	4b67      	ldr	r3, [pc, #412]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d04:	e041      	b.n	8001d8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b62      	ldr	r3, [pc, #392]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f8db 	bl	8000ed4 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff f8d6 	bl	8000ed4 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e227      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b59      	ldr	r3, [pc, #356]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0f1      	beq.n	8001d24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b56      	ldr	r3, [pc, #344]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	22f8      	movs	r2, #248	@ 0xf8
 8001d46:	4393      	bics	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00da      	lsls	r2, r3, #3
 8001d50:	4b52      	ldr	r3, [pc, #328]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d58:	4b50      	ldr	r3, [pc, #320]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8b6 	bl	8000ed4 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f8b1 	bl	8000ed4 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e202      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d80:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f1      	bne.n	8001d6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4013      	ands	r3, r2
 8001d92:	d036      	beq.n	8001e02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da0:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff f894 	bl	8000ed4 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff f88f 	bl	8000ed4 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1e0      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f1      	beq.n	8001db2 <HAL_RCC_OscConfig+0x242>
 8001dce:	e018      	b.n	8001e02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f87a 	bl	8000ed4 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff f875 	bl	8000ed4 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1c6      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d1f1      	bne.n	8001de6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCC_OscConfig+0x29e>
 8001e0c:	e0b4      	b.n	8001f78 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	201f      	movs	r0, #31
 8001e10:	183b      	adds	r3, r7, r0
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	055b      	lsls	r3, r3, #21
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d110      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0549      	lsls	r1, r1, #21
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	61da      	str	r2, [r3, #28]
 8001e30:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	055b      	lsls	r3, r3, #21
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d11a      	bne.n	8001e86 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e50:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_RCC_OscConfig+0x338>)
 8001e56:	2180      	movs	r1, #128	@ 0x80
 8001e58:	0049      	lsls	r1, r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff f839 	bl	8000ed4 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7ff f834 	bl	8000ed4 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e185      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_RCC_OscConfig+0x33c>
 8001e8e:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4b02      	ldr	r3, [pc, #8]	@ (8001e9c <HAL_RCC_OscConfig+0x32c>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	621a      	str	r2, [r3, #32]
 8001e9a:	e035      	b.n	8001f08 <HAL_RCC_OscConfig+0x398>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	fffeffff 	.word	0xfffeffff
 8001ea4:	fffbffff 	.word	0xfffbffff
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10c      	bne.n	8001ece <HAL_RCC_OscConfig+0x35e>
 8001eb4:	4bb6      	ldr	r3, [pc, #728]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	4bb5      	ldr	r3, [pc, #724]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	621a      	str	r2, [r3, #32]
 8001ec0:	4bb3      	ldr	r3, [pc, #716]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	4bb2      	ldr	r3, [pc, #712]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	438a      	bics	r2, r1
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x398>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x380>
 8001ed6:	4bae      	ldr	r3, [pc, #696]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4bad      	ldr	r3, [pc, #692]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001edc:	2104      	movs	r1, #4
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	621a      	str	r2, [r3, #32]
 8001ee2:	4bab      	ldr	r3, [pc, #684]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	4baa      	ldr	r3, [pc, #680]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	621a      	str	r2, [r3, #32]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x398>
 8001ef0:	4ba7      	ldr	r3, [pc, #668]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4ba6      	ldr	r3, [pc, #664]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	438a      	bics	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
 8001efc:	4ba4      	ldr	r3, [pc, #656]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	4ba3      	ldr	r3, [pc, #652]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f02:	2104      	movs	r1, #4
 8001f04:	438a      	bics	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d014      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe ffe0 	bl	8000ed4 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ffdb 	bl	8000ed4 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a9b      	ldr	r2, [pc, #620]	@ (8002194 <HAL_RCC_OscConfig+0x624>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e12b      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	4b98      	ldr	r3, [pc, #608]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3aa>
 8001f38:	e013      	b.n	8001f62 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ffcb 	bl	8000ed4 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	e009      	b.n	8001f58 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7fe ffc6 	bl	8000ed4 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	4a91      	ldr	r2, [pc, #580]	@ (8002194 <HAL_RCC_OscConfig+0x624>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e116      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b8d      	ldr	r3, [pc, #564]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f62:	231f      	movs	r3, #31
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	4b87      	ldr	r3, [pc, #540]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f72:	4989      	ldr	r1, [pc, #548]	@ (8002198 <HAL_RCC_OscConfig+0x628>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d063      	beq.n	800204a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d12a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f8a:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f8e:	4b80      	ldr	r3, [pc, #512]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f90:	2104      	movs	r1, #4
 8001f92:	430a      	orrs	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f96:	4b7e      	ldr	r3, [pc, #504]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ff97 	bl	8000ed4 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fac:	f7fe ff92 	bl	8000ed4 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0e3      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fbe:	4b74      	ldr	r3, [pc, #464]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0f1      	beq.n	8001fac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fc8:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	22f8      	movs	r2, #248	@ 0xf8
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	00da      	lsls	r2, r3, #3
 8001fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fde:	e034      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fe8:	4b69      	ldr	r3, [pc, #420]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fec:	4b68      	ldr	r3, [pc, #416]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001fee:	2104      	movs	r1, #4
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ff4:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff8:	22f8      	movs	r2, #248	@ 0xf8
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	00da      	lsls	r2, r3, #3
 8002004:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002006:	430a      	orrs	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34
 800200a:	e01e      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800200c:	4b60      	ldr	r3, [pc, #384]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800200e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002010:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002012:	2104      	movs	r1, #4
 8002014:	430a      	orrs	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002018:	4b5d      	ldr	r3, [pc, #372]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800201c:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800201e:	2101      	movs	r1, #1
 8002020:	438a      	bics	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe ff56 	bl	8000ed4 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800202e:	f7fe ff51 	bl	8000ed4 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0a2      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002040:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d1f1      	bne.n	800202e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d100      	bne.n	8002054 <HAL_RCC_OscConfig+0x4e4>
 8002052:	e097      	b.n	8002184 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	220c      	movs	r2, #12
 800205a:	4013      	ands	r3, r2
 800205c:	2b08      	cmp	r3, #8
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x4f2>
 8002060:	e06b      	b.n	800213a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d14c      	bne.n	8002104 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b49      	ldr	r3, [pc, #292]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b48      	ldr	r3, [pc, #288]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002070:	494a      	ldr	r1, [pc, #296]	@ (800219c <HAL_RCC_OscConfig+0x62c>)
 8002072:	400a      	ands	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe ff2d 	bl	8000ed4 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe ff28 	bl	8000ed4 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e079      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209e:	4b3c      	ldr	r3, [pc, #240]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	220f      	movs	r2, #15
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ac:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020b2:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a3a      	ldr	r2, [pc, #232]	@ (80021a0 <HAL_RCC_OscConfig+0x630>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	431a      	orrs	r2, r3
 80020c6:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0449      	lsls	r1, r1, #17
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe fefb 	bl	8000ed4 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fef6 	bl	8000ed4 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e047      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	049b      	lsls	r3, r3, #18
 80020fe:	4013      	ands	r3, r2
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x574>
 8002102:	e03f      	b.n	8002184 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800210a:	4924      	ldr	r1, [pc, #144]	@ (800219c <HAL_RCC_OscConfig+0x62c>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fee0 	bl	8000ed4 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fedb 	bl	8000ed4 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e02c      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	049b      	lsls	r3, r3, #18
 8002134:	4013      	ands	r3, r2
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x5aa>
 8002138:	e024      	b.n	8002184 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e01f      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x620>)
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	429a      	cmp	r2, r3
 8002160:	d10e      	bne.n	8002180 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	220f      	movs	r2, #15
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	23f0      	movs	r3, #240	@ 0xf0
 8002174:	039b      	lsls	r3, r3, #14
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b008      	add	sp, #32
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	00001388 	.word	0x00001388
 8002198:	efffffff 	.word	0xefffffff
 800219c:	feffffff 	.word	0xfeffffff
 80021a0:	ffc2ffff 	.word	0xffc2ffff

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b3      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d911      	bls.n	80021ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b58      	ldr	r3, [pc, #352]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	4b55      	ldr	r3, [pc, #340]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e09a      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d015      	beq.n	8002220 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2204      	movs	r2, #4
 80021fa:	4013      	ands	r3, r2
 80021fc:	d006      	beq.n	800220c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021fe:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 8002204:	21e0      	movs	r1, #224	@ 0xe0
 8002206:	00c9      	lsls	r1, r1, #3
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b47      	ldr	r3, [pc, #284]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	22f0      	movs	r2, #240	@ 0xf0
 8002212:	4393      	bics	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4b44      	ldr	r3, [pc, #272]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d040      	beq.n	80022ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b3e      	ldr	r3, [pc, #248]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	029b      	lsls	r3, r3, #10
 800223a:	4013      	ands	r3, r2
 800223c:	d114      	bne.n	8002268 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06e      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b38      	ldr	r3, [pc, #224]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	049b      	lsls	r3, r3, #18
 8002252:	4013      	ands	r3, r2
 8002254:	d108      	bne.n	8002268 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e062      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e05b      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002268:	4b30      	ldr	r3, [pc, #192]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	4393      	bics	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7fe fe2a 	bl	8000ed4 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002284:	e009      	b.n	800229a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002286:	f7fe fe25 	bl	8000ed4 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a27      	ldr	r2, [pc, #156]	@ (8002330 <HAL_RCC_ClockConfig+0x18c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e042      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	220c      	movs	r2, #12
 80022a0:	401a      	ands	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1ec      	bne.n	8002286 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d211      	bcs.n	80022de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <HAL_RCC_ClockConfig+0x184>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e020      	b.n	8002320 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <HAL_RCC_ClockConfig+0x190>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022fc:	f000 f820 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8002300:	0001      	movs	r1, r0
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_ClockConfig+0x188>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	220f      	movs	r2, #15
 800230a:	4013      	ands	r3, r2
 800230c:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x194>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	000a      	movs	r2, r1
 8002312:	40da      	lsrs	r2, r3
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x198>)
 8002316:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fd95 	bl	8000e48 <HAL_InitTick>
  
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
 8002330:	00001388 	.word	0x00001388
 8002334:	fffff8ff 	.word	0xfffff8ff
 8002338:	08003d24 	.word	0x08003d24
 800233c:	20000000 	.word	0x20000000

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	220c      	movs	r2, #12
 8002364:	4013      	ands	r3, r2
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x36>
 800236e:	e02c      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e02c      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0c9b      	lsrs	r3, r3, #18
 800237a:	220f      	movs	r2, #15
 800237c:	4013      	ands	r3, r2
 800237e:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	220f      	movs	r2, #15
 800238a:	4013      	ands	r3, r2
 800238c:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	025b      	lsls	r3, r3, #9
 8002398:	4013      	ands	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	4810      	ldr	r0, [pc, #64]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a0:	f7fd febc 	bl	800011c <__udivsi3>
 80023a4:	0003      	movs	r3, r0
 80023a6:	001a      	movs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4353      	muls	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	000a      	movs	r2, r1
 80023b4:	0152      	lsls	r2, r2, #5
 80023b6:	1a52      	subs	r2, r2, r1
 80023b8:	0193      	lsls	r3, r2, #6
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	185b      	adds	r3, r3, r1
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	e002      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023cc:	613b      	str	r3, [r7, #16]
      break;
 80023ce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023d0:	693b      	ldr	r3, [r7, #16]
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b006      	add	sp, #24
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	08003d3c 	.word	0x08003d3c
 80023e8:	08003d4c 	.word	0x08003d4c

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b02      	ldr	r3, [pc, #8]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002404:	f7ff fff2 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002408:	0001      	movs	r1, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	2207      	movs	r2, #7
 8002412:	4013      	ands	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	40d9      	lsrs	r1, r3
 800241a:	000b      	movs	r3, r1
}    
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	40021000 	.word	0x40021000
 8002428:	08003d34 	.word	0x08003d34

0800242c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e044      	b.n	80024c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2278      	movs	r2, #120	@ 0x78
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f7fe fb91 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2224      	movs	r2, #36	@ 0x24
 800245a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f96c 	bl	8002754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f828 	bl	80024d4 <UART_SetConfig>
 8002484:	0003      	movs	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e01c      	b.n	80024c8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	490d      	ldr	r1, [pc, #52]	@ (80024d0 <HAL_UART_Init+0xa4>)
 800249a:	400a      	ands	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2108      	movs	r1, #8
 80024aa:	438a      	bics	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f9fb 	bl	80028bc <UART_CheckIdleState>
 80024c6:	0003      	movs	r3, r0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	fffff7ff 	.word	0xfffff7ff

080024d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024dc:	231e      	movs	r3, #30
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a8d      	ldr	r2, [pc, #564]	@ (8002738 <UART_SetConfig+0x264>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a88      	ldr	r2, [pc, #544]	@ (800273c <UART_SetConfig+0x268>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a7f      	ldr	r2, [pc, #508]	@ (8002740 <UART_SetConfig+0x26c>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7b      	ldr	r2, [pc, #492]	@ (8002744 <UART_SetConfig+0x270>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d127      	bne.n	80025aa <UART_SetConfig+0xd6>
 800255a:	4b7b      	ldr	r3, [pc, #492]	@ (8002748 <UART_SetConfig+0x274>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	2203      	movs	r2, #3
 8002560:	4013      	ands	r3, r2
 8002562:	2b03      	cmp	r3, #3
 8002564:	d00d      	beq.n	8002582 <UART_SetConfig+0xae>
 8002566:	d81b      	bhi.n	80025a0 <UART_SetConfig+0xcc>
 8002568:	2b02      	cmp	r3, #2
 800256a:	d014      	beq.n	8002596 <UART_SetConfig+0xc2>
 800256c:	d818      	bhi.n	80025a0 <UART_SetConfig+0xcc>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <UART_SetConfig+0xa4>
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00a      	beq.n	800258c <UART_SetConfig+0xb8>
 8002576:	e013      	b.n	80025a0 <UART_SetConfig+0xcc>
 8002578:	231f      	movs	r3, #31
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e021      	b.n	80025c6 <UART_SetConfig+0xf2>
 8002582:	231f      	movs	r3, #31
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e01c      	b.n	80025c6 <UART_SetConfig+0xf2>
 800258c:	231f      	movs	r3, #31
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2204      	movs	r2, #4
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e017      	b.n	80025c6 <UART_SetConfig+0xf2>
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2208      	movs	r2, #8
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e012      	b.n	80025c6 <UART_SetConfig+0xf2>
 80025a0:	231f      	movs	r3, #31
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2210      	movs	r2, #16
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e00d      	b.n	80025c6 <UART_SetConfig+0xf2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a67      	ldr	r2, [pc, #412]	@ (800274c <UART_SetConfig+0x278>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d104      	bne.n	80025be <UART_SetConfig+0xea>
 80025b4:	231f      	movs	r3, #31
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xf2>
 80025be:	231f      	movs	r3, #31
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2210      	movs	r2, #16
 80025c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d15c      	bne.n	800268c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80025d2:	231f      	movs	r3, #31
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d015      	beq.n	8002608 <UART_SetConfig+0x134>
 80025dc:	dc18      	bgt.n	8002610 <UART_SetConfig+0x13c>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00d      	beq.n	80025fe <UART_SetConfig+0x12a>
 80025e2:	dc15      	bgt.n	8002610 <UART_SetConfig+0x13c>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <UART_SetConfig+0x11a>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d005      	beq.n	80025f8 <UART_SetConfig+0x124>
 80025ec:	e010      	b.n	8002610 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ee:	f7ff ff07 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]
        break;
 80025f6:	e012      	b.n	800261e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025f8:	4b55      	ldr	r3, [pc, #340]	@ (8002750 <UART_SetConfig+0x27c>)
 80025fa:	61bb      	str	r3, [r7, #24]
        break;
 80025fc:	e00f      	b.n	800261e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025fe:	f7ff fe9f 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8002602:	0003      	movs	r3, r0
 8002604:	61bb      	str	r3, [r7, #24]
        break;
 8002606:	e00a      	b.n	800261e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	61bb      	str	r3, [r7, #24]
        break;
 800260e:	e006      	b.n	800261e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002614:	231e      	movs	r3, #30
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
        break;
 800261c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d100      	bne.n	8002626 <UART_SetConfig+0x152>
 8002624:	e07a      	b.n	800271c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	18d2      	adds	r2, r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0019      	movs	r1, r3
 8002638:	0010      	movs	r0, r2
 800263a:	f7fd fd6f 	bl	800011c <__udivsi3>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d91c      	bls.n	8002682 <UART_SetConfig+0x1ae>
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	429a      	cmp	r2, r3
 8002650:	d217      	bcs.n	8002682 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	b29a      	uxth	r2, r3
 8002656:	200e      	movs	r0, #14
 8002658:	183b      	adds	r3, r7, r0
 800265a:	210f      	movs	r1, #15
 800265c:	438a      	bics	r2, r1
 800265e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	b299      	uxth	r1, r3
 800266c:	183b      	adds	r3, r7, r0
 800266e:	183a      	adds	r2, r7, r0
 8002670:	8812      	ldrh	r2, [r2, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	183a      	adds	r2, r7, r0
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	e04c      	b.n	800271c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002682:	231e      	movs	r3, #30
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e047      	b.n	800271c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800268c:	231f      	movs	r3, #31
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b08      	cmp	r3, #8
 8002694:	d015      	beq.n	80026c2 <UART_SetConfig+0x1ee>
 8002696:	dc18      	bgt.n	80026ca <UART_SetConfig+0x1f6>
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00d      	beq.n	80026b8 <UART_SetConfig+0x1e4>
 800269c:	dc15      	bgt.n	80026ca <UART_SetConfig+0x1f6>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <UART_SetConfig+0x1d4>
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d005      	beq.n	80026b2 <UART_SetConfig+0x1de>
 80026a6:	e010      	b.n	80026ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026a8:	f7ff feaa 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 80026ac:	0003      	movs	r3, r0
 80026ae:	61bb      	str	r3, [r7, #24]
        break;
 80026b0:	e012      	b.n	80026d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <UART_SetConfig+0x27c>)
 80026b4:	61bb      	str	r3, [r7, #24]
        break;
 80026b6:	e00f      	b.n	80026d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026b8:	f7ff fe42 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80026bc:	0003      	movs	r3, r0
 80026be:	61bb      	str	r3, [r7, #24]
        break;
 80026c0:	e00a      	b.n	80026d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	61bb      	str	r3, [r7, #24]
        break;
 80026c8:	e006      	b.n	80026d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ce:	231e      	movs	r3, #30
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
        break;
 80026d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01e      	beq.n	800271c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	085a      	lsrs	r2, r3, #1
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	18d2      	adds	r2, r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f7fd fd14 	bl	800011c <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d90a      	bls.n	8002714 <UART_SetConfig+0x240>
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	429a      	cmp	r2, r3
 8002706:	d205      	bcs.n	8002714 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	e003      	b.n	800271c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002714:	231e      	movs	r3, #30
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002728:	231e      	movs	r3, #30
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b008      	add	sp, #32
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	ffff69f3 	.word	0xffff69f3
 800273c:	ffffcfff 	.word	0xffffcfff
 8002740:	fffff4ff 	.word	0xfffff4ff
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	40004400 	.word	0x40004400
 8002750:	007a1200 	.word	0x007a1200

08002754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	2208      	movs	r2, #8
 8002762:	4013      	ands	r3, r2
 8002764:	d00b      	beq.n	800277e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a4a      	ldr	r2, [pc, #296]	@ (8002898 <UART_AdvFeatureConfig+0x144>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d00b      	beq.n	80027a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a43      	ldr	r2, [pc, #268]	@ (800289c <UART_AdvFeatureConfig+0x148>)
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a3b      	ldr	r2, [pc, #236]	@ (80028a0 <UART_AdvFeatureConfig+0x14c>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <UART_AdvFeatureConfig+0x150>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	2210      	movs	r2, #16
 80027ea:	4013      	ands	r3, r2
 80027ec:	d00b      	beq.n	8002806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	@ (80028a8 <UART_AdvFeatureConfig+0x154>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	2220      	movs	r2, #32
 800280c:	4013      	ands	r3, r2
 800280e:	d00b      	beq.n	8002828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4a25      	ldr	r2, [pc, #148]	@ (80028ac <UART_AdvFeatureConfig+0x158>)
 8002818:	4013      	ands	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	4013      	ands	r3, r2
 8002830:	d01d      	beq.n	800286e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <UART_AdvFeatureConfig+0x15c>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	035b      	lsls	r3, r3, #13
 8002852:	429a      	cmp	r2, r3
 8002854:	d10b      	bne.n	800286e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <UART_AdvFeatureConfig+0x160>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2280      	movs	r2, #128	@ 0x80
 8002874:	4013      	ands	r3, r2
 8002876:	d00b      	beq.n	8002890 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <UART_AdvFeatureConfig+0x164>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  }
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b002      	add	sp, #8
 8002896:	bd80      	pop	{r7, pc}
 8002898:	ffff7fff 	.word	0xffff7fff
 800289c:	fffdffff 	.word	0xfffdffff
 80028a0:	fffeffff 	.word	0xfffeffff
 80028a4:	fffbffff 	.word	0xfffbffff
 80028a8:	ffffefff 	.word	0xffffefff
 80028ac:	ffffdfff 	.word	0xffffdfff
 80028b0:	ffefffff 	.word	0xffefffff
 80028b4:	ff9fffff 	.word	0xff9fffff
 80028b8:	fff7ffff 	.word	0xfff7ffff

080028bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b092      	sub	sp, #72	@ 0x48
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2284      	movs	r2, #132	@ 0x84
 80028c8:	2100      	movs	r1, #0
 80028ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028cc:	f7fe fb02 	bl	8000ed4 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2208      	movs	r2, #8
 80028dc:	4013      	ands	r3, r2
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d12c      	bne.n	800293c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	0391      	lsls	r1, r2, #14
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4a46      	ldr	r2, [pc, #280]	@ (8002a04 <UART_CheckIdleState+0x148>)
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f000 f88c 	bl	8002a0c <UART_WaitOnFlagUntilTimeout>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d021      	beq.n	800293c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8310 	mrs	r3, PRIMASK
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002900:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002902:	2301      	movs	r3, #1
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			@ (mov r8, r8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2180      	movs	r1, #128	@ 0x80
 800291a:	438a      	bics	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2278      	movs	r2, #120	@ 0x78
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e05f      	b.n	80029fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	4013      	ands	r3, r2
 8002946:	2b04      	cmp	r3, #4
 8002948:	d146      	bne.n	80029d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800294a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	03d1      	lsls	r1, r2, #15
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <UART_CheckIdleState+0x148>)
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	f000 f858 	bl	8002a0c <UART_WaitOnFlagUntilTimeout>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d03b      	beq.n	80029d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	60fb      	str	r3, [r7, #12]
  return(result);
 8002966:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4921      	ldr	r1, [pc, #132]	@ (8002a08 <UART_CheckIdleState+0x14c>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	61bb      	str	r3, [r7, #24]
  return(result);
 8002998:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	2120      	movs	r1, #32
 80029ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2278      	movs	r2, #120	@ 0x78
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e011      	b.n	80029fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	2120      	movs	r1, #32
 80029e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2278      	movs	r2, #120	@ 0x78
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b010      	add	sp, #64	@ 0x40
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	01ffffff 	.word	0x01ffffff
 8002a08:	fffffedf 	.word	0xfffffedf

08002a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1c:	e051      	b.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3301      	adds	r3, #1
 8002a22:	d04e      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a24:	f7fe fa56 	bl	8000ed4 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d302      	bcc.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e051      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b80      	cmp	r3, #128	@ 0x80
 8002a4e:	d038      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d035      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d111      	bne.n	8002a88 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f83c 	bl	8002aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2284      	movs	r2, #132	@ 0x84
 8002a78:	2108      	movs	r1, #8
 8002a7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2278      	movs	r2, #120	@ 0x78
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e02c      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	401a      	ands	r2, r3
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d112      	bne.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2280      	movs	r2, #128	@ 0x80
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f81f 	bl	8002aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2284      	movs	r2, #132	@ 0x84
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2278      	movs	r2, #120	@ 0x78
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e00f      	b.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	4153      	adcs	r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d09e      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	@ 0x38
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af4:	f3ef 8310 	mrs	r3, PRIMASK
 8002af8:	617b      	str	r3, [r7, #20]
  return(result);
 8002afa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002afe:	2301      	movs	r3, #1
 8002b00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4926      	ldr	r1, [pc, #152]	@ (8002bb0 <UART_EndRxTransfer+0xc4>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f383 8810 	msr	PRIMASK, r3
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b26:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2a:	623b      	str	r3, [r7, #32]
  return(result);
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b30:	2301      	movs	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2101      	movs	r1, #1
 8002b48:	438a      	bics	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	f383 8810 	msr	PRIMASK, r3
}
 8002b56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d118      	bne.n	8002b92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8310 	mrs	r3, PRIMASK
 8002b64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2110      	movs	r1, #16
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f383 8810 	msr	PRIMASK, r3
}
 8002b90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2280      	movs	r2, #128	@ 0x80
 8002b96:	2120      	movs	r1, #32
 8002b98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b00e      	add	sp, #56	@ 0x38
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	fffffedf 	.word	0xfffffedf

08002bb4 <srand>:
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <srand+0x48>)
 8002bb6:	b570      	push	{r4, r5, r6, lr}
 8002bb8:	681d      	ldr	r5, [r3, #0]
 8002bba:	0004      	movs	r4, r0
 8002bbc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d116      	bne.n	8002bf0 <srand+0x3c>
 8002bc2:	2018      	movs	r0, #24
 8002bc4:	f000 fa60 	bl	8003088 <malloc>
 8002bc8:	1e02      	subs	r2, r0, #0
 8002bca:	6328      	str	r0, [r5, #48]	@ 0x30
 8002bcc:	d104      	bne.n	8002bd8 <srand+0x24>
 8002bce:	2146      	movs	r1, #70	@ 0x46
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <srand+0x4c>)
 8002bd2:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <srand+0x50>)
 8002bd4:	f000 f9f0 	bl	8002fb8 <__assert_func>
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <srand+0x54>)
 8002bda:	2100      	movs	r1, #0
 8002bdc:	6003      	str	r3, [r0, #0]
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <srand+0x58>)
 8002be0:	6043      	str	r3, [r0, #4]
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <srand+0x5c>)
 8002be4:	6083      	str	r3, [r0, #8]
 8002be6:	230b      	movs	r3, #11
 8002be8:	8183      	strh	r3, [r0, #12]
 8002bea:	2001      	movs	r0, #1
 8002bec:	6110      	str	r0, [r2, #16]
 8002bee:	6151      	str	r1, [r2, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002bf4:	611c      	str	r4, [r3, #16]
 8002bf6:	615a      	str	r2, [r3, #20]
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	20000018 	.word	0x20000018
 8002c00:	08003d5c 	.word	0x08003d5c
 8002c04:	08003d73 	.word	0x08003d73
 8002c08:	abcd330e 	.word	0xabcd330e
 8002c0c:	e66d1234 	.word	0xe66d1234
 8002c10:	0005deec 	.word	0x0005deec

08002c14 <rand>:
 8002c14:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <rand+0x5c>)
 8002c16:	b510      	push	{r4, lr}
 8002c18:	681c      	ldr	r4, [r3, #0]
 8002c1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <rand+0x3a>
 8002c20:	2018      	movs	r0, #24
 8002c22:	f000 fa31 	bl	8003088 <malloc>
 8002c26:	1e02      	subs	r2, r0, #0
 8002c28:	6320      	str	r0, [r4, #48]	@ 0x30
 8002c2a:	d104      	bne.n	8002c36 <rand+0x22>
 8002c2c:	2152      	movs	r1, #82	@ 0x52
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <rand+0x60>)
 8002c30:	4811      	ldr	r0, [pc, #68]	@ (8002c78 <rand+0x64>)
 8002c32:	f000 f9c1 	bl	8002fb8 <__assert_func>
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <rand+0x68>)
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6003      	str	r3, [r0, #0]
 8002c3c:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <rand+0x6c>)
 8002c3e:	6043      	str	r3, [r0, #4]
 8002c40:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <rand+0x70>)
 8002c42:	6083      	str	r3, [r0, #8]
 8002c44:	230b      	movs	r3, #11
 8002c46:	8183      	strh	r3, [r0, #12]
 8002c48:	2001      	movs	r0, #1
 8002c4a:	6110      	str	r0, [r2, #16]
 8002c4c:	6151      	str	r1, [r2, #20]
 8002c4e:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <rand+0x74>)
 8002c52:	6920      	ldr	r0, [r4, #16]
 8002c54:	6961      	ldr	r1, [r4, #20]
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <rand+0x78>)
 8002c58:	f7fd fbd6 	bl	8000408 <__aeabi_lmul>
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2300      	movs	r3, #0
 8002c60:	1880      	adds	r0, r0, r2
 8002c62:	4159      	adcs	r1, r3
 8002c64:	6120      	str	r0, [r4, #16]
 8002c66:	6161      	str	r1, [r4, #20]
 8002c68:	0048      	lsls	r0, r1, #1
 8002c6a:	0840      	lsrs	r0, r0, #1
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	20000018 	.word	0x20000018
 8002c74:	08003d5c 	.word	0x08003d5c
 8002c78:	08003d73 	.word	0x08003d73
 8002c7c:	abcd330e 	.word	0xabcd330e
 8002c80:	e66d1234 	.word	0xe66d1234
 8002c84:	0005deec 	.word	0x0005deec
 8002c88:	4c957f2d 	.word	0x4c957f2d
 8002c8c:	5851f42d 	.word	0x5851f42d

08002c90 <std>:
 8002c90:	2300      	movs	r3, #0
 8002c92:	b510      	push	{r4, lr}
 8002c94:	0004      	movs	r4, r0
 8002c96:	6003      	str	r3, [r0, #0]
 8002c98:	6043      	str	r3, [r0, #4]
 8002c9a:	6083      	str	r3, [r0, #8]
 8002c9c:	8181      	strh	r1, [r0, #12]
 8002c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ca0:	81c2      	strh	r2, [r0, #14]
 8002ca2:	6103      	str	r3, [r0, #16]
 8002ca4:	6143      	str	r3, [r0, #20]
 8002ca6:	6183      	str	r3, [r0, #24]
 8002ca8:	0019      	movs	r1, r3
 8002caa:	2208      	movs	r2, #8
 8002cac:	305c      	adds	r0, #92	@ 0x5c
 8002cae:	f000 f8ff 	bl	8002eb0 <memset>
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <std+0x50>)
 8002cb4:	6224      	str	r4, [r4, #32]
 8002cb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <std+0x54>)
 8002cba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <std+0x58>)
 8002cbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <std+0x5c>)
 8002cc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <std+0x60>)
 8002cc6:	429c      	cmp	r4, r3
 8002cc8:	d005      	beq.n	8002cd6 <std+0x46>
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <std+0x64>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	d002      	beq.n	8002cd6 <std+0x46>
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <std+0x68>)
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	d103      	bne.n	8002cde <std+0x4e>
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	3058      	adds	r0, #88	@ 0x58
 8002cda:	f000 f969 	bl	8002fb0 <__retarget_lock_init_recursive>
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	08002e19 	.word	0x08002e19
 8002ce4:	08002e41 	.word	0x08002e41
 8002ce8:	08002e79 	.word	0x08002e79
 8002cec:	08002ea5 	.word	0x08002ea5
 8002cf0:	20000154 	.word	0x20000154
 8002cf4:	200001bc 	.word	0x200001bc
 8002cf8:	20000224 	.word	0x20000224

08002cfc <stdio_exit_handler>:
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4a03      	ldr	r2, [pc, #12]	@ (8002d0c <stdio_exit_handler+0x10>)
 8002d00:	4903      	ldr	r1, [pc, #12]	@ (8002d10 <stdio_exit_handler+0x14>)
 8002d02:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <stdio_exit_handler+0x18>)
 8002d04:	f000 f86c 	bl	8002de0 <_fwalk_sglue>
 8002d08:	bd10      	pop	{r4, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	0800330d 	.word	0x0800330d
 8002d14:	2000001c 	.word	0x2000001c

08002d18 <cleanup_stdio>:
 8002d18:	6841      	ldr	r1, [r0, #4]
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <cleanup_stdio+0x30>)
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	0004      	movs	r4, r0
 8002d20:	4299      	cmp	r1, r3
 8002d22:	d001      	beq.n	8002d28 <cleanup_stdio+0x10>
 8002d24:	f000 faf2 	bl	800330c <_fflush_r>
 8002d28:	68a1      	ldr	r1, [r4, #8]
 8002d2a:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <cleanup_stdio+0x34>)
 8002d2c:	4299      	cmp	r1, r3
 8002d2e:	d002      	beq.n	8002d36 <cleanup_stdio+0x1e>
 8002d30:	0020      	movs	r0, r4
 8002d32:	f000 faeb 	bl	800330c <_fflush_r>
 8002d36:	68e1      	ldr	r1, [r4, #12]
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <cleanup_stdio+0x38>)
 8002d3a:	4299      	cmp	r1, r3
 8002d3c:	d002      	beq.n	8002d44 <cleanup_stdio+0x2c>
 8002d3e:	0020      	movs	r0, r4
 8002d40:	f000 fae4 	bl	800330c <_fflush_r>
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	20000154 	.word	0x20000154
 8002d4c:	200001bc 	.word	0x200001bc
 8002d50:	20000224 	.word	0x20000224

08002d54 <global_stdio_init.part.0>:
 8002d54:	b510      	push	{r4, lr}
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <global_stdio_init.part.0+0x28>)
 8002d58:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <global_stdio_init.part.0+0x2c>)
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	4809      	ldr	r0, [pc, #36]	@ (8002d84 <global_stdio_init.part.0+0x30>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	f7ff ff95 	bl	8002c90 <std>
 8002d66:	2201      	movs	r2, #1
 8002d68:	2109      	movs	r1, #9
 8002d6a:	4807      	ldr	r0, [pc, #28]	@ (8002d88 <global_stdio_init.part.0+0x34>)
 8002d6c:	f7ff ff90 	bl	8002c90 <std>
 8002d70:	2202      	movs	r2, #2
 8002d72:	2112      	movs	r1, #18
 8002d74:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <global_stdio_init.part.0+0x38>)
 8002d76:	f7ff ff8b 	bl	8002c90 <std>
 8002d7a:	bd10      	pop	{r4, pc}
 8002d7c:	2000028c 	.word	0x2000028c
 8002d80:	08002cfd 	.word	0x08002cfd
 8002d84:	20000154 	.word	0x20000154
 8002d88:	200001bc 	.word	0x200001bc
 8002d8c:	20000224 	.word	0x20000224

08002d90 <__sfp_lock_acquire>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <__sfp_lock_acquire+0xc>)
 8002d94:	f000 f90d 	bl	8002fb2 <__retarget_lock_acquire_recursive>
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	20000295 	.word	0x20000295

08002da0 <__sfp_lock_release>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4802      	ldr	r0, [pc, #8]	@ (8002dac <__sfp_lock_release+0xc>)
 8002da4:	f000 f906 	bl	8002fb4 <__retarget_lock_release_recursive>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	20000295 	.word	0x20000295

08002db0 <__sinit>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	0004      	movs	r4, r0
 8002db4:	f7ff ffec 	bl	8002d90 <__sfp_lock_acquire>
 8002db8:	6a23      	ldr	r3, [r4, #32]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <__sinit+0x14>
 8002dbe:	f7ff ffef 	bl	8002da0 <__sfp_lock_release>
 8002dc2:	bd10      	pop	{r4, pc}
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__sinit+0x28>)
 8002dc6:	6223      	str	r3, [r4, #32]
 8002dc8:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <__sinit+0x2c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f6      	bne.n	8002dbe <__sinit+0xe>
 8002dd0:	f7ff ffc0 	bl	8002d54 <global_stdio_init.part.0>
 8002dd4:	e7f3      	b.n	8002dbe <__sinit+0xe>
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	08002d19 	.word	0x08002d19
 8002ddc:	2000028c 	.word	0x2000028c

08002de0 <_fwalk_sglue>:
 8002de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002de2:	0014      	movs	r4, r2
 8002de4:	2600      	movs	r6, #0
 8002de6:	9000      	str	r0, [sp, #0]
 8002de8:	9101      	str	r1, [sp, #4]
 8002dea:	68a5      	ldr	r5, [r4, #8]
 8002dec:	6867      	ldr	r7, [r4, #4]
 8002dee:	3f01      	subs	r7, #1
 8002df0:	d504      	bpl.n	8002dfc <_fwalk_sglue+0x1c>
 8002df2:	6824      	ldr	r4, [r4, #0]
 8002df4:	2c00      	cmp	r4, #0
 8002df6:	d1f8      	bne.n	8002dea <_fwalk_sglue+0xa>
 8002df8:	0030      	movs	r0, r6
 8002dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dfc:	89ab      	ldrh	r3, [r5, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d908      	bls.n	8002e14 <_fwalk_sglue+0x34>
 8002e02:	220e      	movs	r2, #14
 8002e04:	5eab      	ldrsh	r3, [r5, r2]
 8002e06:	3301      	adds	r3, #1
 8002e08:	d004      	beq.n	8002e14 <_fwalk_sglue+0x34>
 8002e0a:	0029      	movs	r1, r5
 8002e0c:	9800      	ldr	r0, [sp, #0]
 8002e0e:	9b01      	ldr	r3, [sp, #4]
 8002e10:	4798      	blx	r3
 8002e12:	4306      	orrs	r6, r0
 8002e14:	3568      	adds	r5, #104	@ 0x68
 8002e16:	e7ea      	b.n	8002dee <_fwalk_sglue+0xe>

08002e18 <__sread>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	000c      	movs	r4, r1
 8002e1c:	250e      	movs	r5, #14
 8002e1e:	5f49      	ldrsh	r1, [r1, r5]
 8002e20:	f000 f874 	bl	8002f0c <_read_r>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	db03      	blt.n	8002e30 <__sread+0x18>
 8002e28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e2a:	181b      	adds	r3, r3, r0
 8002e2c:	6563      	str	r3, [r4, #84]	@ 0x54
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	4a02      	ldr	r2, [pc, #8]	@ (8002e3c <__sread+0x24>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	81a3      	strh	r3, [r4, #12]
 8002e38:	e7f9      	b.n	8002e2e <__sread+0x16>
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	ffffefff 	.word	0xffffefff

08002e40 <__swrite>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	001f      	movs	r7, r3
 8002e44:	898b      	ldrh	r3, [r1, #12]
 8002e46:	0005      	movs	r5, r0
 8002e48:	000c      	movs	r4, r1
 8002e4a:	0016      	movs	r6, r2
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	d505      	bpl.n	8002e5c <__swrite+0x1c>
 8002e50:	230e      	movs	r3, #14
 8002e52:	5ec9      	ldrsh	r1, [r1, r3]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2302      	movs	r3, #2
 8002e58:	f000 f844 	bl	8002ee4 <_lseek_r>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <__swrite+0x34>)
 8002e60:	0028      	movs	r0, r5
 8002e62:	4013      	ands	r3, r2
 8002e64:	81a3      	strh	r3, [r4, #12]
 8002e66:	0032      	movs	r2, r6
 8002e68:	230e      	movs	r3, #14
 8002e6a:	5ee1      	ldrsh	r1, [r4, r3]
 8002e6c:	003b      	movs	r3, r7
 8002e6e:	f000 f861 	bl	8002f34 <_write_r>
 8002e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e74:	ffffefff 	.word	0xffffefff

08002e78 <__sseek>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	000c      	movs	r4, r1
 8002e7c:	250e      	movs	r5, #14
 8002e7e:	5f49      	ldrsh	r1, [r1, r5]
 8002e80:	f000 f830 	bl	8002ee4 <_lseek_r>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	1c42      	adds	r2, r0, #1
 8002e88:	d103      	bne.n	8002e92 <__sseek+0x1a>
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <__sseek+0x28>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	0152      	lsls	r2, r2, #5
 8002e96:	4313      	orrs	r3, r2
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e9c:	e7f8      	b.n	8002e90 <__sseek+0x18>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	ffffefff 	.word	0xffffefff

08002ea4 <__sclose>:
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	230e      	movs	r3, #14
 8002ea8:	5ec9      	ldrsh	r1, [r1, r3]
 8002eaa:	f000 f809 	bl	8002ec0 <_close_r>
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <memset>:
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	1882      	adds	r2, r0, r2
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	7019      	strb	r1, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <_close_r>:
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	b570      	push	{r4, r5, r6, lr}
 8002ec4:	4d06      	ldr	r5, [pc, #24]	@ (8002ee0 <_close_r+0x20>)
 8002ec6:	0004      	movs	r4, r0
 8002ec8:	0008      	movs	r0, r1
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	f7fd ff15 	bl	8000cfa <_close>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d103      	bne.n	8002edc <_close_r+0x1c>
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d000      	beq.n	8002edc <_close_r+0x1c>
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	20000290 	.word	0x20000290

08002ee4 <_lseek_r>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	0004      	movs	r4, r0
 8002ee8:	0008      	movs	r0, r1
 8002eea:	0011      	movs	r1, r2
 8002eec:	001a      	movs	r2, r3
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d05      	ldr	r5, [pc, #20]	@ (8002f08 <_lseek_r+0x24>)
 8002ef2:	602b      	str	r3, [r5, #0]
 8002ef4:	f7fd ff22 	bl	8000d3c <_lseek>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d103      	bne.n	8002f04 <_lseek_r+0x20>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d000      	beq.n	8002f04 <_lseek_r+0x20>
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	20000290 	.word	0x20000290

08002f0c <_read_r>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	0004      	movs	r4, r0
 8002f10:	0008      	movs	r0, r1
 8002f12:	0011      	movs	r1, r2
 8002f14:	001a      	movs	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	4d05      	ldr	r5, [pc, #20]	@ (8002f30 <_read_r+0x24>)
 8002f1a:	602b      	str	r3, [r5, #0]
 8002f1c:	f7fd feb4 	bl	8000c88 <_read>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d103      	bne.n	8002f2c <_read_r+0x20>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d000      	beq.n	8002f2c <_read_r+0x20>
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	20000290 	.word	0x20000290

08002f34 <_write_r>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	0004      	movs	r4, r0
 8002f38:	0008      	movs	r0, r1
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4d05      	ldr	r5, [pc, #20]	@ (8002f58 <_write_r+0x24>)
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	f7fd febd 	bl	8000cc2 <_write>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_write_r+0x20>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <_write_r+0x20>
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	20000290 	.word	0x20000290

08002f5c <__errno>:
 8002f5c:	4b01      	ldr	r3, [pc, #4]	@ (8002f64 <__errno+0x8>)
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	4770      	bx	lr
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	20000018 	.word	0x20000018

08002f68 <__libc_init_array>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	4c0c      	ldr	r4, [pc, #48]	@ (8002fa0 <__libc_init_array+0x38>)
 8002f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa4 <__libc_init_array+0x3c>)
 8002f70:	1b64      	subs	r4, r4, r5
 8002f72:	10a4      	asrs	r4, r4, #2
 8002f74:	42a6      	cmp	r6, r4
 8002f76:	d109      	bne.n	8002f8c <__libc_init_array+0x24>
 8002f78:	2600      	movs	r6, #0
 8002f7a:	f000 fe63 	bl	8003c44 <_init>
 8002f7e:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa8 <__libc_init_array+0x40>)
 8002f80:	4d0a      	ldr	r5, [pc, #40]	@ (8002fac <__libc_init_array+0x44>)
 8002f82:	1b64      	subs	r4, r4, r5
 8002f84:	10a4      	asrs	r4, r4, #2
 8002f86:	42a6      	cmp	r6, r4
 8002f88:	d105      	bne.n	8002f96 <__libc_init_array+0x2e>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	00b3      	lsls	r3, r6, #2
 8002f8e:	58eb      	ldr	r3, [r5, r3]
 8002f90:	4798      	blx	r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7ee      	b.n	8002f74 <__libc_init_array+0xc>
 8002f96:	00b3      	lsls	r3, r6, #2
 8002f98:	58eb      	ldr	r3, [r5, r3]
 8002f9a:	4798      	blx	r3
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7f2      	b.n	8002f86 <__libc_init_array+0x1e>
 8002fa0:	08003e3c 	.word	0x08003e3c
 8002fa4:	08003e3c 	.word	0x08003e3c
 8002fa8:	08003e40 	.word	0x08003e40
 8002fac:	08003e3c 	.word	0x08003e3c

08002fb0 <__retarget_lock_init_recursive>:
 8002fb0:	4770      	bx	lr

08002fb2 <__retarget_lock_acquire_recursive>:
 8002fb2:	4770      	bx	lr

08002fb4 <__retarget_lock_release_recursive>:
 8002fb4:	4770      	bx	lr
	...

08002fb8 <__assert_func>:
 8002fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002fba:	0014      	movs	r4, r2
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <__assert_func+0x2c>)
 8002fc0:	0005      	movs	r5, r0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	000e      	movs	r6, r1
 8002fc6:	68d8      	ldr	r0, [r3, #12]
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <__assert_func+0x30>)
 8002fca:	2c00      	cmp	r4, #0
 8002fcc:	d101      	bne.n	8002fd2 <__assert_func+0x1a>
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <__assert_func+0x34>)
 8002fd0:	001c      	movs	r4, r3
 8002fd2:	4907      	ldr	r1, [pc, #28]	@ (8002ff0 <__assert_func+0x38>)
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	9402      	str	r4, [sp, #8]
 8002fd8:	002b      	movs	r3, r5
 8002fda:	9600      	str	r6, [sp, #0]
 8002fdc:	f000 f9c2 	bl	8003364 <fiprintf>
 8002fe0:	f000 f9e2 	bl	80033a8 <abort>
 8002fe4:	20000018 	.word	0x20000018
 8002fe8:	08003dcb 	.word	0x08003dcb
 8002fec:	08003e06 	.word	0x08003e06
 8002ff0:	08003dd8 	.word	0x08003dd8

08002ff4 <_free_r>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	0005      	movs	r5, r0
 8002ff8:	1e0c      	subs	r4, r1, #0
 8002ffa:	d010      	beq.n	800301e <_free_r+0x2a>
 8002ffc:	3c04      	subs	r4, #4
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	da00      	bge.n	8003006 <_free_r+0x12>
 8003004:	18e4      	adds	r4, r4, r3
 8003006:	0028      	movs	r0, r5
 8003008:	f000 f8ea 	bl	80031e0 <__malloc_lock>
 800300c:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <_free_r+0x90>)
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <_free_r+0x2c>
 8003014:	6063      	str	r3, [r4, #4]
 8003016:	6014      	str	r4, [r2, #0]
 8003018:	0028      	movs	r0, r5
 800301a:	f000 f8e9 	bl	80031f0 <__malloc_unlock>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	42a3      	cmp	r3, r4
 8003022:	d908      	bls.n	8003036 <_free_r+0x42>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	1821      	adds	r1, r4, r0
 8003028:	428b      	cmp	r3, r1
 800302a:	d1f3      	bne.n	8003014 <_free_r+0x20>
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	1809      	adds	r1, r1, r0
 8003032:	6021      	str	r1, [r4, #0]
 8003034:	e7ee      	b.n	8003014 <_free_r+0x20>
 8003036:	001a      	movs	r2, r3
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <_free_r+0x4e>
 800303e:	42a3      	cmp	r3, r4
 8003040:	d9f9      	bls.n	8003036 <_free_r+0x42>
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	1850      	adds	r0, r2, r1
 8003046:	42a0      	cmp	r0, r4
 8003048:	d10b      	bne.n	8003062 <_free_r+0x6e>
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	1809      	adds	r1, r1, r0
 800304e:	1850      	adds	r0, r2, r1
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	4283      	cmp	r3, r0
 8003054:	d1e0      	bne.n	8003018 <_free_r+0x24>
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	1841      	adds	r1, r0, r1
 800305c:	6011      	str	r1, [r2, #0]
 800305e:	6053      	str	r3, [r2, #4]
 8003060:	e7da      	b.n	8003018 <_free_r+0x24>
 8003062:	42a0      	cmp	r0, r4
 8003064:	d902      	bls.n	800306c <_free_r+0x78>
 8003066:	230c      	movs	r3, #12
 8003068:	602b      	str	r3, [r5, #0]
 800306a:	e7d5      	b.n	8003018 <_free_r+0x24>
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	1821      	adds	r1, r4, r0
 8003070:	428b      	cmp	r3, r1
 8003072:	d103      	bne.n	800307c <_free_r+0x88>
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	1809      	adds	r1, r1, r0
 800307a:	6021      	str	r1, [r4, #0]
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	6054      	str	r4, [r2, #4]
 8003080:	e7ca      	b.n	8003018 <_free_r+0x24>
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	2000029c 	.word	0x2000029c

08003088 <malloc>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <malloc+0x10>)
 800308c:	0001      	movs	r1, r0
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	f000 f826 	bl	80030e0 <_malloc_r>
 8003094:	bd10      	pop	{r4, pc}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	20000018 	.word	0x20000018

0800309c <sbrk_aligned>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4e0f      	ldr	r6, [pc, #60]	@ (80030dc <sbrk_aligned+0x40>)
 80030a0:	000d      	movs	r5, r1
 80030a2:	6831      	ldr	r1, [r6, #0]
 80030a4:	0004      	movs	r4, r0
 80030a6:	2900      	cmp	r1, #0
 80030a8:	d102      	bne.n	80030b0 <sbrk_aligned+0x14>
 80030aa:	f000 f96b 	bl	8003384 <_sbrk_r>
 80030ae:	6030      	str	r0, [r6, #0]
 80030b0:	0029      	movs	r1, r5
 80030b2:	0020      	movs	r0, r4
 80030b4:	f000 f966 	bl	8003384 <_sbrk_r>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d103      	bne.n	80030c4 <sbrk_aligned+0x28>
 80030bc:	2501      	movs	r5, #1
 80030be:	426d      	negs	r5, r5
 80030c0:	0028      	movs	r0, r5
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	2303      	movs	r3, #3
 80030c6:	1cc5      	adds	r5, r0, #3
 80030c8:	439d      	bics	r5, r3
 80030ca:	42a8      	cmp	r0, r5
 80030cc:	d0f8      	beq.n	80030c0 <sbrk_aligned+0x24>
 80030ce:	1a29      	subs	r1, r5, r0
 80030d0:	0020      	movs	r0, r4
 80030d2:	f000 f957 	bl	8003384 <_sbrk_r>
 80030d6:	3001      	adds	r0, #1
 80030d8:	d1f2      	bne.n	80030c0 <sbrk_aligned+0x24>
 80030da:	e7ef      	b.n	80030bc <sbrk_aligned+0x20>
 80030dc:	20000298 	.word	0x20000298

080030e0 <_malloc_r>:
 80030e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e2:	2203      	movs	r2, #3
 80030e4:	1ccb      	adds	r3, r1, #3
 80030e6:	4393      	bics	r3, r2
 80030e8:	3308      	adds	r3, #8
 80030ea:	0005      	movs	r5, r0
 80030ec:	001f      	movs	r7, r3
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d234      	bcs.n	800315c <_malloc_r+0x7c>
 80030f2:	270c      	movs	r7, #12
 80030f4:	42b9      	cmp	r1, r7
 80030f6:	d833      	bhi.n	8003160 <_malloc_r+0x80>
 80030f8:	0028      	movs	r0, r5
 80030fa:	f000 f871 	bl	80031e0 <__malloc_lock>
 80030fe:	4e37      	ldr	r6, [pc, #220]	@ (80031dc <_malloc_r+0xfc>)
 8003100:	6833      	ldr	r3, [r6, #0]
 8003102:	001c      	movs	r4, r3
 8003104:	2c00      	cmp	r4, #0
 8003106:	d12f      	bne.n	8003168 <_malloc_r+0x88>
 8003108:	0039      	movs	r1, r7
 800310a:	0028      	movs	r0, r5
 800310c:	f7ff ffc6 	bl	800309c <sbrk_aligned>
 8003110:	0004      	movs	r4, r0
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	d15f      	bne.n	80031d6 <_malloc_r+0xf6>
 8003116:	6834      	ldr	r4, [r6, #0]
 8003118:	9400      	str	r4, [sp, #0]
 800311a:	9b00      	ldr	r3, [sp, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d14a      	bne.n	80031b6 <_malloc_r+0xd6>
 8003120:	2c00      	cmp	r4, #0
 8003122:	d052      	beq.n	80031ca <_malloc_r+0xea>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	0028      	movs	r0, r5
 8003128:	18e3      	adds	r3, r4, r3
 800312a:	9900      	ldr	r1, [sp, #0]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	f000 f929 	bl	8003384 <_sbrk_r>
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	4283      	cmp	r3, r0
 8003136:	d148      	bne.n	80031ca <_malloc_r+0xea>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	0028      	movs	r0, r5
 800313c:	1aff      	subs	r7, r7, r3
 800313e:	0039      	movs	r1, r7
 8003140:	f7ff ffac 	bl	800309c <sbrk_aligned>
 8003144:	3001      	adds	r0, #1
 8003146:	d040      	beq.n	80031ca <_malloc_r+0xea>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	19db      	adds	r3, r3, r7
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	6833      	ldr	r3, [r6, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	2a00      	cmp	r2, #0
 8003154:	d133      	bne.n	80031be <_malloc_r+0xde>
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	6033      	str	r3, [r6, #0]
 800315a:	e019      	b.n	8003190 <_malloc_r+0xb0>
 800315c:	2b00      	cmp	r3, #0
 800315e:	dac9      	bge.n	80030f4 <_malloc_r+0x14>
 8003160:	230c      	movs	r3, #12
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	2000      	movs	r0, #0
 8003166:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003168:	6821      	ldr	r1, [r4, #0]
 800316a:	1bc9      	subs	r1, r1, r7
 800316c:	d420      	bmi.n	80031b0 <_malloc_r+0xd0>
 800316e:	290b      	cmp	r1, #11
 8003170:	d90a      	bls.n	8003188 <_malloc_r+0xa8>
 8003172:	19e2      	adds	r2, r4, r7
 8003174:	6027      	str	r7, [r4, #0]
 8003176:	42a3      	cmp	r3, r4
 8003178:	d104      	bne.n	8003184 <_malloc_r+0xa4>
 800317a:	6032      	str	r2, [r6, #0]
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	6011      	str	r1, [r2, #0]
 8003180:	6053      	str	r3, [r2, #4]
 8003182:	e005      	b.n	8003190 <_malloc_r+0xb0>
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	e7f9      	b.n	800317c <_malloc_r+0x9c>
 8003188:	6862      	ldr	r2, [r4, #4]
 800318a:	42a3      	cmp	r3, r4
 800318c:	d10e      	bne.n	80031ac <_malloc_r+0xcc>
 800318e:	6032      	str	r2, [r6, #0]
 8003190:	0028      	movs	r0, r5
 8003192:	f000 f82d 	bl	80031f0 <__malloc_unlock>
 8003196:	0020      	movs	r0, r4
 8003198:	2207      	movs	r2, #7
 800319a:	300b      	adds	r0, #11
 800319c:	1d23      	adds	r3, r4, #4
 800319e:	4390      	bics	r0, r2
 80031a0:	1ac2      	subs	r2, r0, r3
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d0df      	beq.n	8003166 <_malloc_r+0x86>
 80031a6:	1a1b      	subs	r3, r3, r0
 80031a8:	50a3      	str	r3, [r4, r2]
 80031aa:	e7dc      	b.n	8003166 <_malloc_r+0x86>
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e7ef      	b.n	8003190 <_malloc_r+0xb0>
 80031b0:	0023      	movs	r3, r4
 80031b2:	6864      	ldr	r4, [r4, #4]
 80031b4:	e7a6      	b.n	8003104 <_malloc_r+0x24>
 80031b6:	9c00      	ldr	r4, [sp, #0]
 80031b8:	6863      	ldr	r3, [r4, #4]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	e7ad      	b.n	800311a <_malloc_r+0x3a>
 80031be:	001a      	movs	r2, r3
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	42a3      	cmp	r3, r4
 80031c4:	d1fb      	bne.n	80031be <_malloc_r+0xde>
 80031c6:	2300      	movs	r3, #0
 80031c8:	e7da      	b.n	8003180 <_malloc_r+0xa0>
 80031ca:	230c      	movs	r3, #12
 80031cc:	0028      	movs	r0, r5
 80031ce:	602b      	str	r3, [r5, #0]
 80031d0:	f000 f80e 	bl	80031f0 <__malloc_unlock>
 80031d4:	e7c6      	b.n	8003164 <_malloc_r+0x84>
 80031d6:	6007      	str	r7, [r0, #0]
 80031d8:	e7da      	b.n	8003190 <_malloc_r+0xb0>
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	2000029c 	.word	0x2000029c

080031e0 <__malloc_lock>:
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4802      	ldr	r0, [pc, #8]	@ (80031ec <__malloc_lock+0xc>)
 80031e4:	f7ff fee5 	bl	8002fb2 <__retarget_lock_acquire_recursive>
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	20000294 	.word	0x20000294

080031f0 <__malloc_unlock>:
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4802      	ldr	r0, [pc, #8]	@ (80031fc <__malloc_unlock+0xc>)
 80031f4:	f7ff fede 	bl	8002fb4 <__retarget_lock_release_recursive>
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	20000294 	.word	0x20000294

08003200 <__sflush_r>:
 8003200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003202:	220c      	movs	r2, #12
 8003204:	5e8b      	ldrsh	r3, [r1, r2]
 8003206:	0005      	movs	r5, r0
 8003208:	000c      	movs	r4, r1
 800320a:	071a      	lsls	r2, r3, #28
 800320c:	d456      	bmi.n	80032bc <__sflush_r+0xbc>
 800320e:	684a      	ldr	r2, [r1, #4]
 8003210:	2a00      	cmp	r2, #0
 8003212:	dc02      	bgt.n	800321a <__sflush_r+0x1a>
 8003214:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003216:	2a00      	cmp	r2, #0
 8003218:	dd4e      	ble.n	80032b8 <__sflush_r+0xb8>
 800321a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800321c:	2f00      	cmp	r7, #0
 800321e:	d04b      	beq.n	80032b8 <__sflush_r+0xb8>
 8003220:	2200      	movs	r2, #0
 8003222:	2080      	movs	r0, #128	@ 0x80
 8003224:	682e      	ldr	r6, [r5, #0]
 8003226:	602a      	str	r2, [r5, #0]
 8003228:	001a      	movs	r2, r3
 800322a:	0140      	lsls	r0, r0, #5
 800322c:	6a21      	ldr	r1, [r4, #32]
 800322e:	4002      	ands	r2, r0
 8003230:	4203      	tst	r3, r0
 8003232:	d033      	beq.n	800329c <__sflush_r+0x9c>
 8003234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	075b      	lsls	r3, r3, #29
 800323a:	d506      	bpl.n	800324a <__sflush_r+0x4a>
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <__sflush_r+0x4a>
 8003246:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003248:	1ad2      	subs	r2, r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	0028      	movs	r0, r5
 800324e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003250:	6a21      	ldr	r1, [r4, #32]
 8003252:	47b8      	blx	r7
 8003254:	89a2      	ldrh	r2, [r4, #12]
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	d106      	bne.n	8003268 <__sflush_r+0x68>
 800325a:	6829      	ldr	r1, [r5, #0]
 800325c:	291d      	cmp	r1, #29
 800325e:	d846      	bhi.n	80032ee <__sflush_r+0xee>
 8003260:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <__sflush_r+0x108>)
 8003262:	410b      	asrs	r3, r1
 8003264:	07db      	lsls	r3, r3, #31
 8003266:	d442      	bmi.n	80032ee <__sflush_r+0xee>
 8003268:	2300      	movs	r3, #0
 800326a:	6063      	str	r3, [r4, #4]
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	04d2      	lsls	r2, r2, #19
 8003272:	d505      	bpl.n	8003280 <__sflush_r+0x80>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d102      	bne.n	800327e <__sflush_r+0x7e>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d100      	bne.n	8003280 <__sflush_r+0x80>
 800327e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003282:	602e      	str	r6, [r5, #0]
 8003284:	2900      	cmp	r1, #0
 8003286:	d017      	beq.n	80032b8 <__sflush_r+0xb8>
 8003288:	0023      	movs	r3, r4
 800328a:	3344      	adds	r3, #68	@ 0x44
 800328c:	4299      	cmp	r1, r3
 800328e:	d002      	beq.n	8003296 <__sflush_r+0x96>
 8003290:	0028      	movs	r0, r5
 8003292:	f7ff feaf 	bl	8002ff4 <_free_r>
 8003296:	2300      	movs	r3, #0
 8003298:	6363      	str	r3, [r4, #52]	@ 0x34
 800329a:	e00d      	b.n	80032b8 <__sflush_r+0xb8>
 800329c:	2301      	movs	r3, #1
 800329e:	0028      	movs	r0, r5
 80032a0:	47b8      	blx	r7
 80032a2:	0002      	movs	r2, r0
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d1c6      	bne.n	8003236 <__sflush_r+0x36>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0c3      	beq.n	8003236 <__sflush_r+0x36>
 80032ae:	2b1d      	cmp	r3, #29
 80032b0:	d001      	beq.n	80032b6 <__sflush_r+0xb6>
 80032b2:	2b16      	cmp	r3, #22
 80032b4:	d11a      	bne.n	80032ec <__sflush_r+0xec>
 80032b6:	602e      	str	r6, [r5, #0]
 80032b8:	2000      	movs	r0, #0
 80032ba:	e01e      	b.n	80032fa <__sflush_r+0xfa>
 80032bc:	690e      	ldr	r6, [r1, #16]
 80032be:	2e00      	cmp	r6, #0
 80032c0:	d0fa      	beq.n	80032b8 <__sflush_r+0xb8>
 80032c2:	680f      	ldr	r7, [r1, #0]
 80032c4:	600e      	str	r6, [r1, #0]
 80032c6:	1bba      	subs	r2, r7, r6
 80032c8:	9201      	str	r2, [sp, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	079b      	lsls	r3, r3, #30
 80032ce:	d100      	bne.n	80032d2 <__sflush_r+0xd2>
 80032d0:	694a      	ldr	r2, [r1, #20]
 80032d2:	60a2      	str	r2, [r4, #8]
 80032d4:	9b01      	ldr	r3, [sp, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	ddee      	ble.n	80032b8 <__sflush_r+0xb8>
 80032da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032dc:	0032      	movs	r2, r6
 80032de:	001f      	movs	r7, r3
 80032e0:	0028      	movs	r0, r5
 80032e2:	9b01      	ldr	r3, [sp, #4]
 80032e4:	6a21      	ldr	r1, [r4, #32]
 80032e6:	47b8      	blx	r7
 80032e8:	2800      	cmp	r0, #0
 80032ea:	dc07      	bgt.n	80032fc <__sflush_r+0xfc>
 80032ec:	89a2      	ldrh	r2, [r4, #12]
 80032ee:	2340      	movs	r3, #64	@ 0x40
 80032f0:	2001      	movs	r0, #1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	81a3      	strh	r3, [r4, #12]
 80032f8:	4240      	negs	r0, r0
 80032fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032fc:	9b01      	ldr	r3, [sp, #4]
 80032fe:	1836      	adds	r6, r6, r0
 8003300:	1a1b      	subs	r3, r3, r0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	e7e6      	b.n	80032d4 <__sflush_r+0xd4>
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	dfbffffe 	.word	0xdfbffffe

0800330c <_fflush_r>:
 800330c:	690b      	ldr	r3, [r1, #16]
 800330e:	b570      	push	{r4, r5, r6, lr}
 8003310:	0005      	movs	r5, r0
 8003312:	000c      	movs	r4, r1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <_fflush_r+0x12>
 8003318:	2500      	movs	r5, #0
 800331a:	0028      	movs	r0, r5
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	2800      	cmp	r0, #0
 8003320:	d004      	beq.n	800332c <_fflush_r+0x20>
 8003322:	6a03      	ldr	r3, [r0, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <_fflush_r+0x20>
 8003328:	f7ff fd42 	bl	8002db0 <__sinit>
 800332c:	220c      	movs	r2, #12
 800332e:	5ea3      	ldrsh	r3, [r4, r2]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f1      	beq.n	8003318 <_fflush_r+0xc>
 8003334:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003336:	07d2      	lsls	r2, r2, #31
 8003338:	d404      	bmi.n	8003344 <_fflush_r+0x38>
 800333a:	059b      	lsls	r3, r3, #22
 800333c:	d402      	bmi.n	8003344 <_fflush_r+0x38>
 800333e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003340:	f7ff fe37 	bl	8002fb2 <__retarget_lock_acquire_recursive>
 8003344:	0028      	movs	r0, r5
 8003346:	0021      	movs	r1, r4
 8003348:	f7ff ff5a 	bl	8003200 <__sflush_r>
 800334c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800334e:	0005      	movs	r5, r0
 8003350:	07db      	lsls	r3, r3, #31
 8003352:	d4e2      	bmi.n	800331a <_fflush_r+0xe>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	059b      	lsls	r3, r3, #22
 8003358:	d4df      	bmi.n	800331a <_fflush_r+0xe>
 800335a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335c:	f7ff fe2a 	bl	8002fb4 <__retarget_lock_release_recursive>
 8003360:	e7db      	b.n	800331a <_fflush_r+0xe>
	...

08003364 <fiprintf>:
 8003364:	b40e      	push	{r1, r2, r3}
 8003366:	b517      	push	{r0, r1, r2, r4, lr}
 8003368:	4c05      	ldr	r4, [pc, #20]	@ (8003380 <fiprintf+0x1c>)
 800336a:	ab05      	add	r3, sp, #20
 800336c:	cb04      	ldmia	r3!, {r2}
 800336e:	0001      	movs	r1, r0
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f000 f846 	bl	8003404 <_vfiprintf_r>
 8003378:	bc1e      	pop	{r1, r2, r3, r4}
 800337a:	bc08      	pop	{r3}
 800337c:	b003      	add	sp, #12
 800337e:	4718      	bx	r3
 8003380:	20000018 	.word	0x20000018

08003384 <_sbrk_r>:
 8003384:	2300      	movs	r3, #0
 8003386:	b570      	push	{r4, r5, r6, lr}
 8003388:	4d06      	ldr	r5, [pc, #24]	@ (80033a4 <_sbrk_r+0x20>)
 800338a:	0004      	movs	r4, r0
 800338c:	0008      	movs	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fd fce0 	bl	8000d54 <_sbrk>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d103      	bne.n	80033a0 <_sbrk_r+0x1c>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d000      	beq.n	80033a0 <_sbrk_r+0x1c>
 800339e:	6023      	str	r3, [r4, #0]
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	20000290 	.word	0x20000290

080033a8 <abort>:
 80033a8:	2006      	movs	r0, #6
 80033aa:	b510      	push	{r4, lr}
 80033ac:	f000 fb8e 	bl	8003acc <raise>
 80033b0:	2001      	movs	r0, #1
 80033b2:	f7fd fc5c 	bl	8000c6e <_exit>

080033b6 <__sfputc_r>:
 80033b6:	6893      	ldr	r3, [r2, #8]
 80033b8:	b510      	push	{r4, lr}
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da04      	bge.n	80033cc <__sfputc_r+0x16>
 80033c2:	6994      	ldr	r4, [r2, #24]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	db07      	blt.n	80033d8 <__sfputc_r+0x22>
 80033c8:	290a      	cmp	r1, #10
 80033ca:	d005      	beq.n	80033d8 <__sfputc_r+0x22>
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	1c58      	adds	r0, r3, #1
 80033d0:	6010      	str	r0, [r2, #0]
 80033d2:	7019      	strb	r1, [r3, #0]
 80033d4:	0008      	movs	r0, r1
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	f000 faae 	bl	8003938 <__swbuf_r>
 80033dc:	0001      	movs	r1, r0
 80033de:	e7f9      	b.n	80033d4 <__sfputc_r+0x1e>

080033e0 <__sfputs_r>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	0006      	movs	r6, r0
 80033e4:	000f      	movs	r7, r1
 80033e6:	0014      	movs	r4, r2
 80033e8:	18d5      	adds	r5, r2, r3
 80033ea:	42ac      	cmp	r4, r5
 80033ec:	d101      	bne.n	80033f2 <__sfputs_r+0x12>
 80033ee:	2000      	movs	r0, #0
 80033f0:	e007      	b.n	8003402 <__sfputs_r+0x22>
 80033f2:	7821      	ldrb	r1, [r4, #0]
 80033f4:	003a      	movs	r2, r7
 80033f6:	0030      	movs	r0, r6
 80033f8:	f7ff ffdd 	bl	80033b6 <__sfputc_r>
 80033fc:	3401      	adds	r4, #1
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	d1f3      	bne.n	80033ea <__sfputs_r+0xa>
 8003402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003404 <_vfiprintf_r>:
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b0a1      	sub	sp, #132	@ 0x84
 8003408:	000f      	movs	r7, r1
 800340a:	0015      	movs	r5, r2
 800340c:	001e      	movs	r6, r3
 800340e:	9003      	str	r0, [sp, #12]
 8003410:	2800      	cmp	r0, #0
 8003412:	d004      	beq.n	800341e <_vfiprintf_r+0x1a>
 8003414:	6a03      	ldr	r3, [r0, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <_vfiprintf_r+0x1a>
 800341a:	f7ff fcc9 	bl	8002db0 <__sinit>
 800341e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003420:	07db      	lsls	r3, r3, #31
 8003422:	d405      	bmi.n	8003430 <_vfiprintf_r+0x2c>
 8003424:	89bb      	ldrh	r3, [r7, #12]
 8003426:	059b      	lsls	r3, r3, #22
 8003428:	d402      	bmi.n	8003430 <_vfiprintf_r+0x2c>
 800342a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800342c:	f7ff fdc1 	bl	8002fb2 <__retarget_lock_acquire_recursive>
 8003430:	89bb      	ldrh	r3, [r7, #12]
 8003432:	071b      	lsls	r3, r3, #28
 8003434:	d502      	bpl.n	800343c <_vfiprintf_r+0x38>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <_vfiprintf_r+0x60>
 800343c:	0039      	movs	r1, r7
 800343e:	9803      	ldr	r0, [sp, #12]
 8003440:	f000 fabc 	bl	80039bc <__swsetup_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	d00d      	beq.n	8003464 <_vfiprintf_r+0x60>
 8003448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800344a:	07db      	lsls	r3, r3, #31
 800344c:	d503      	bpl.n	8003456 <_vfiprintf_r+0x52>
 800344e:	2001      	movs	r0, #1
 8003450:	4240      	negs	r0, r0
 8003452:	b021      	add	sp, #132	@ 0x84
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	89bb      	ldrh	r3, [r7, #12]
 8003458:	059b      	lsls	r3, r3, #22
 800345a:	d4f8      	bmi.n	800344e <_vfiprintf_r+0x4a>
 800345c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800345e:	f7ff fda9 	bl	8002fb4 <__retarget_lock_release_recursive>
 8003462:	e7f4      	b.n	800344e <_vfiprintf_r+0x4a>
 8003464:	2300      	movs	r3, #0
 8003466:	ac08      	add	r4, sp, #32
 8003468:	6163      	str	r3, [r4, #20]
 800346a:	3320      	adds	r3, #32
 800346c:	7663      	strb	r3, [r4, #25]
 800346e:	3310      	adds	r3, #16
 8003470:	76a3      	strb	r3, [r4, #26]
 8003472:	9607      	str	r6, [sp, #28]
 8003474:	002e      	movs	r6, r5
 8003476:	7833      	ldrb	r3, [r6, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <_vfiprintf_r+0x7c>
 800347c:	2b25      	cmp	r3, #37	@ 0x25
 800347e:	d148      	bne.n	8003512 <_vfiprintf_r+0x10e>
 8003480:	1b73      	subs	r3, r6, r5
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	42ae      	cmp	r6, r5
 8003486:	d00b      	beq.n	80034a0 <_vfiprintf_r+0x9c>
 8003488:	002a      	movs	r2, r5
 800348a:	0039      	movs	r1, r7
 800348c:	9803      	ldr	r0, [sp, #12]
 800348e:	f7ff ffa7 	bl	80033e0 <__sfputs_r>
 8003492:	3001      	adds	r0, #1
 8003494:	d100      	bne.n	8003498 <_vfiprintf_r+0x94>
 8003496:	e0ae      	b.n	80035f6 <_vfiprintf_r+0x1f2>
 8003498:	6963      	ldr	r3, [r4, #20]
 800349a:	9a05      	ldr	r2, [sp, #20]
 800349c:	189b      	adds	r3, r3, r2
 800349e:	6163      	str	r3, [r4, #20]
 80034a0:	7833      	ldrb	r3, [r6, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <_vfiprintf_r+0xa4>
 80034a6:	e0a6      	b.n	80035f6 <_vfiprintf_r+0x1f2>
 80034a8:	2201      	movs	r2, #1
 80034aa:	2300      	movs	r3, #0
 80034ac:	4252      	negs	r2, r2
 80034ae:	6062      	str	r2, [r4, #4]
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	3254      	adds	r2, #84	@ 0x54
 80034b4:	1852      	adds	r2, r2, r1
 80034b6:	1c75      	adds	r5, r6, #1
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	60e3      	str	r3, [r4, #12]
 80034bc:	60a3      	str	r3, [r4, #8]
 80034be:	7013      	strb	r3, [r2, #0]
 80034c0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80034c2:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <_vfiprintf_r+0x224>)
 80034c4:	2205      	movs	r2, #5
 80034c6:	0018      	movs	r0, r3
 80034c8:	7829      	ldrb	r1, [r5, #0]
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	f000 fb1e 	bl	8003b0c <memchr>
 80034d0:	1c6e      	adds	r6, r5, #1
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d11f      	bne.n	8003516 <_vfiprintf_r+0x112>
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	06d3      	lsls	r3, r2, #27
 80034da:	d504      	bpl.n	80034e6 <_vfiprintf_r+0xe2>
 80034dc:	2353      	movs	r3, #83	@ 0x53
 80034de:	a904      	add	r1, sp, #16
 80034e0:	185b      	adds	r3, r3, r1
 80034e2:	2120      	movs	r1, #32
 80034e4:	7019      	strb	r1, [r3, #0]
 80034e6:	0713      	lsls	r3, r2, #28
 80034e8:	d504      	bpl.n	80034f4 <_vfiprintf_r+0xf0>
 80034ea:	2353      	movs	r3, #83	@ 0x53
 80034ec:	a904      	add	r1, sp, #16
 80034ee:	185b      	adds	r3, r3, r1
 80034f0:	212b      	movs	r1, #43	@ 0x2b
 80034f2:	7019      	strb	r1, [r3, #0]
 80034f4:	782b      	ldrb	r3, [r5, #0]
 80034f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80034f8:	d016      	beq.n	8003528 <_vfiprintf_r+0x124>
 80034fa:	002e      	movs	r6, r5
 80034fc:	2100      	movs	r1, #0
 80034fe:	200a      	movs	r0, #10
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	7832      	ldrb	r2, [r6, #0]
 8003504:	1c75      	adds	r5, r6, #1
 8003506:	3a30      	subs	r2, #48	@ 0x30
 8003508:	2a09      	cmp	r2, #9
 800350a:	d950      	bls.n	80035ae <_vfiprintf_r+0x1aa>
 800350c:	2900      	cmp	r1, #0
 800350e:	d111      	bne.n	8003534 <_vfiprintf_r+0x130>
 8003510:	e017      	b.n	8003542 <_vfiprintf_r+0x13e>
 8003512:	3601      	adds	r6, #1
 8003514:	e7af      	b.n	8003476 <_vfiprintf_r+0x72>
 8003516:	9b05      	ldr	r3, [sp, #20]
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	1ac0      	subs	r0, r0, r3
 800351c:	2301      	movs	r3, #1
 800351e:	4083      	lsls	r3, r0
 8003520:	4313      	orrs	r3, r2
 8003522:	0035      	movs	r5, r6
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	e7cc      	b.n	80034c2 <_vfiprintf_r+0xbe>
 8003528:	9b07      	ldr	r3, [sp, #28]
 800352a:	1d19      	adds	r1, r3, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	9107      	str	r1, [sp, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db01      	blt.n	8003538 <_vfiprintf_r+0x134>
 8003534:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003536:	e004      	b.n	8003542 <_vfiprintf_r+0x13e>
 8003538:	425b      	negs	r3, r3
 800353a:	60e3      	str	r3, [r4, #12]
 800353c:	2302      	movs	r3, #2
 800353e:	4313      	orrs	r3, r2
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	7833      	ldrb	r3, [r6, #0]
 8003544:	2b2e      	cmp	r3, #46	@ 0x2e
 8003546:	d10c      	bne.n	8003562 <_vfiprintf_r+0x15e>
 8003548:	7873      	ldrb	r3, [r6, #1]
 800354a:	2b2a      	cmp	r3, #42	@ 0x2a
 800354c:	d134      	bne.n	80035b8 <_vfiprintf_r+0x1b4>
 800354e:	9b07      	ldr	r3, [sp, #28]
 8003550:	3602      	adds	r6, #2
 8003552:	1d1a      	adds	r2, r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	9207      	str	r2, [sp, #28]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da01      	bge.n	8003560 <_vfiprintf_r+0x15c>
 800355c:	2301      	movs	r3, #1
 800355e:	425b      	negs	r3, r3
 8003560:	9309      	str	r3, [sp, #36]	@ 0x24
 8003562:	4d32      	ldr	r5, [pc, #200]	@ (800362c <_vfiprintf_r+0x228>)
 8003564:	2203      	movs	r2, #3
 8003566:	0028      	movs	r0, r5
 8003568:	7831      	ldrb	r1, [r6, #0]
 800356a:	f000 facf 	bl	8003b0c <memchr>
 800356e:	2800      	cmp	r0, #0
 8003570:	d006      	beq.n	8003580 <_vfiprintf_r+0x17c>
 8003572:	2340      	movs	r3, #64	@ 0x40
 8003574:	1b40      	subs	r0, r0, r5
 8003576:	4083      	lsls	r3, r0
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	3601      	adds	r6, #1
 800357c:	4313      	orrs	r3, r2
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	7831      	ldrb	r1, [r6, #0]
 8003582:	2206      	movs	r2, #6
 8003584:	482a      	ldr	r0, [pc, #168]	@ (8003630 <_vfiprintf_r+0x22c>)
 8003586:	1c75      	adds	r5, r6, #1
 8003588:	7621      	strb	r1, [r4, #24]
 800358a:	f000 fabf 	bl	8003b0c <memchr>
 800358e:	2800      	cmp	r0, #0
 8003590:	d040      	beq.n	8003614 <_vfiprintf_r+0x210>
 8003592:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <_vfiprintf_r+0x230>)
 8003594:	2b00      	cmp	r3, #0
 8003596:	d122      	bne.n	80035de <_vfiprintf_r+0x1da>
 8003598:	2207      	movs	r2, #7
 800359a:	9b07      	ldr	r3, [sp, #28]
 800359c:	3307      	adds	r3, #7
 800359e:	4393      	bics	r3, r2
 80035a0:	3308      	adds	r3, #8
 80035a2:	9307      	str	r3, [sp, #28]
 80035a4:	6963      	ldr	r3, [r4, #20]
 80035a6:	9a04      	ldr	r2, [sp, #16]
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	6163      	str	r3, [r4, #20]
 80035ac:	e762      	b.n	8003474 <_vfiprintf_r+0x70>
 80035ae:	4343      	muls	r3, r0
 80035b0:	002e      	movs	r6, r5
 80035b2:	2101      	movs	r1, #1
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	e7a4      	b.n	8003502 <_vfiprintf_r+0xfe>
 80035b8:	2300      	movs	r3, #0
 80035ba:	200a      	movs	r0, #10
 80035bc:	0019      	movs	r1, r3
 80035be:	3601      	adds	r6, #1
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	7832      	ldrb	r2, [r6, #0]
 80035c4:	1c75      	adds	r5, r6, #1
 80035c6:	3a30      	subs	r2, #48	@ 0x30
 80035c8:	2a09      	cmp	r2, #9
 80035ca:	d903      	bls.n	80035d4 <_vfiprintf_r+0x1d0>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0c8      	beq.n	8003562 <_vfiprintf_r+0x15e>
 80035d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80035d2:	e7c6      	b.n	8003562 <_vfiprintf_r+0x15e>
 80035d4:	4341      	muls	r1, r0
 80035d6:	002e      	movs	r6, r5
 80035d8:	2301      	movs	r3, #1
 80035da:	1889      	adds	r1, r1, r2
 80035dc:	e7f1      	b.n	80035c2 <_vfiprintf_r+0x1be>
 80035de:	aa07      	add	r2, sp, #28
 80035e0:	9200      	str	r2, [sp, #0]
 80035e2:	0021      	movs	r1, r4
 80035e4:	003a      	movs	r2, r7
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <_vfiprintf_r+0x234>)
 80035e8:	9803      	ldr	r0, [sp, #12]
 80035ea:	e000      	b.n	80035ee <_vfiprintf_r+0x1ea>
 80035ec:	bf00      	nop
 80035ee:	9004      	str	r0, [sp, #16]
 80035f0:	9b04      	ldr	r3, [sp, #16]
 80035f2:	3301      	adds	r3, #1
 80035f4:	d1d6      	bne.n	80035a4 <_vfiprintf_r+0x1a0>
 80035f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035f8:	07db      	lsls	r3, r3, #31
 80035fa:	d405      	bmi.n	8003608 <_vfiprintf_r+0x204>
 80035fc:	89bb      	ldrh	r3, [r7, #12]
 80035fe:	059b      	lsls	r3, r3, #22
 8003600:	d402      	bmi.n	8003608 <_vfiprintf_r+0x204>
 8003602:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003604:	f7ff fcd6 	bl	8002fb4 <__retarget_lock_release_recursive>
 8003608:	89bb      	ldrh	r3, [r7, #12]
 800360a:	065b      	lsls	r3, r3, #25
 800360c:	d500      	bpl.n	8003610 <_vfiprintf_r+0x20c>
 800360e:	e71e      	b.n	800344e <_vfiprintf_r+0x4a>
 8003610:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003612:	e71e      	b.n	8003452 <_vfiprintf_r+0x4e>
 8003614:	aa07      	add	r2, sp, #28
 8003616:	9200      	str	r2, [sp, #0]
 8003618:	0021      	movs	r1, r4
 800361a:	003a      	movs	r2, r7
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <_vfiprintf_r+0x234>)
 800361e:	9803      	ldr	r0, [sp, #12]
 8003620:	f000 f87c 	bl	800371c <_printf_i>
 8003624:	e7e3      	b.n	80035ee <_vfiprintf_r+0x1ea>
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	08003e07 	.word	0x08003e07
 800362c:	08003e0d 	.word	0x08003e0d
 8003630:	08003e11 	.word	0x08003e11
 8003634:	00000000 	.word	0x00000000
 8003638:	080033e1 	.word	0x080033e1

0800363c <_printf_common>:
 800363c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800363e:	0016      	movs	r6, r2
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	688a      	ldr	r2, [r1, #8]
 8003644:	690b      	ldr	r3, [r1, #16]
 8003646:	000c      	movs	r4, r1
 8003648:	9000      	str	r0, [sp, #0]
 800364a:	4293      	cmp	r3, r2
 800364c:	da00      	bge.n	8003650 <_printf_common+0x14>
 800364e:	0013      	movs	r3, r2
 8003650:	0022      	movs	r2, r4
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	3243      	adds	r2, #67	@ 0x43
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	2a00      	cmp	r2, #0
 800365a:	d001      	beq.n	8003660 <_printf_common+0x24>
 800365c:	3301      	adds	r3, #1
 800365e:	6033      	str	r3, [r6, #0]
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	069b      	lsls	r3, r3, #26
 8003664:	d502      	bpl.n	800366c <_printf_common+0x30>
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	3302      	adds	r3, #2
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	2306      	movs	r3, #6
 8003670:	0015      	movs	r5, r2
 8003672:	401d      	ands	r5, r3
 8003674:	421a      	tst	r2, r3
 8003676:	d027      	beq.n	80036c8 <_printf_common+0x8c>
 8003678:	0023      	movs	r3, r4
 800367a:	3343      	adds	r3, #67	@ 0x43
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	1e5a      	subs	r2, r3, #1
 8003680:	4193      	sbcs	r3, r2
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	0692      	lsls	r2, r2, #26
 8003686:	d430      	bmi.n	80036ea <_printf_common+0xae>
 8003688:	0022      	movs	r2, r4
 800368a:	9901      	ldr	r1, [sp, #4]
 800368c:	9800      	ldr	r0, [sp, #0]
 800368e:	9d08      	ldr	r5, [sp, #32]
 8003690:	3243      	adds	r2, #67	@ 0x43
 8003692:	47a8      	blx	r5
 8003694:	3001      	adds	r0, #1
 8003696:	d025      	beq.n	80036e4 <_printf_common+0xa8>
 8003698:	2206      	movs	r2, #6
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	2500      	movs	r5, #0
 800369e:	4013      	ands	r3, r2
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d105      	bne.n	80036b0 <_printf_common+0x74>
 80036a4:	6833      	ldr	r3, [r6, #0]
 80036a6:	68e5      	ldr	r5, [r4, #12]
 80036a8:	1aed      	subs	r5, r5, r3
 80036aa:	43eb      	mvns	r3, r5
 80036ac:	17db      	asrs	r3, r3, #31
 80036ae:	401d      	ands	r5, r3
 80036b0:	68a3      	ldr	r3, [r4, #8]
 80036b2:	6922      	ldr	r2, [r4, #16]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	dd01      	ble.n	80036bc <_printf_common+0x80>
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	18ed      	adds	r5, r5, r3
 80036bc:	2600      	movs	r6, #0
 80036be:	42b5      	cmp	r5, r6
 80036c0:	d120      	bne.n	8003704 <_printf_common+0xc8>
 80036c2:	2000      	movs	r0, #0
 80036c4:	e010      	b.n	80036e8 <_printf_common+0xac>
 80036c6:	3501      	adds	r5, #1
 80036c8:	68e3      	ldr	r3, [r4, #12]
 80036ca:	6832      	ldr	r2, [r6, #0]
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	42ab      	cmp	r3, r5
 80036d0:	ddd2      	ble.n	8003678 <_printf_common+0x3c>
 80036d2:	0022      	movs	r2, r4
 80036d4:	2301      	movs	r3, #1
 80036d6:	9901      	ldr	r1, [sp, #4]
 80036d8:	9800      	ldr	r0, [sp, #0]
 80036da:	9f08      	ldr	r7, [sp, #32]
 80036dc:	3219      	adds	r2, #25
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	d1f0      	bne.n	80036c6 <_printf_common+0x8a>
 80036e4:	2001      	movs	r0, #1
 80036e6:	4240      	negs	r0, r0
 80036e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036ea:	2030      	movs	r0, #48	@ 0x30
 80036ec:	18e1      	adds	r1, r4, r3
 80036ee:	3143      	adds	r1, #67	@ 0x43
 80036f0:	7008      	strb	r0, [r1, #0]
 80036f2:	0021      	movs	r1, r4
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	3145      	adds	r1, #69	@ 0x45
 80036f8:	7809      	ldrb	r1, [r1, #0]
 80036fa:	18a2      	adds	r2, r4, r2
 80036fc:	3243      	adds	r2, #67	@ 0x43
 80036fe:	3302      	adds	r3, #2
 8003700:	7011      	strb	r1, [r2, #0]
 8003702:	e7c1      	b.n	8003688 <_printf_common+0x4c>
 8003704:	0022      	movs	r2, r4
 8003706:	2301      	movs	r3, #1
 8003708:	9901      	ldr	r1, [sp, #4]
 800370a:	9800      	ldr	r0, [sp, #0]
 800370c:	9f08      	ldr	r7, [sp, #32]
 800370e:	321a      	adds	r2, #26
 8003710:	47b8      	blx	r7
 8003712:	3001      	adds	r0, #1
 8003714:	d0e6      	beq.n	80036e4 <_printf_common+0xa8>
 8003716:	3601      	adds	r6, #1
 8003718:	e7d1      	b.n	80036be <_printf_common+0x82>
	...

0800371c <_printf_i>:
 800371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371e:	b08b      	sub	sp, #44	@ 0x2c
 8003720:	9206      	str	r2, [sp, #24]
 8003722:	000a      	movs	r2, r1
 8003724:	3243      	adds	r2, #67	@ 0x43
 8003726:	9307      	str	r3, [sp, #28]
 8003728:	9005      	str	r0, [sp, #20]
 800372a:	9203      	str	r2, [sp, #12]
 800372c:	7e0a      	ldrb	r2, [r1, #24]
 800372e:	000c      	movs	r4, r1
 8003730:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003732:	2a78      	cmp	r2, #120	@ 0x78
 8003734:	d809      	bhi.n	800374a <_printf_i+0x2e>
 8003736:	2a62      	cmp	r2, #98	@ 0x62
 8003738:	d80b      	bhi.n	8003752 <_printf_i+0x36>
 800373a:	2a00      	cmp	r2, #0
 800373c:	d100      	bne.n	8003740 <_printf_i+0x24>
 800373e:	e0bc      	b.n	80038ba <_printf_i+0x19e>
 8003740:	497b      	ldr	r1, [pc, #492]	@ (8003930 <_printf_i+0x214>)
 8003742:	9104      	str	r1, [sp, #16]
 8003744:	2a58      	cmp	r2, #88	@ 0x58
 8003746:	d100      	bne.n	800374a <_printf_i+0x2e>
 8003748:	e090      	b.n	800386c <_printf_i+0x150>
 800374a:	0025      	movs	r5, r4
 800374c:	3542      	adds	r5, #66	@ 0x42
 800374e:	702a      	strb	r2, [r5, #0]
 8003750:	e022      	b.n	8003798 <_printf_i+0x7c>
 8003752:	0010      	movs	r0, r2
 8003754:	3863      	subs	r0, #99	@ 0x63
 8003756:	2815      	cmp	r0, #21
 8003758:	d8f7      	bhi.n	800374a <_printf_i+0x2e>
 800375a:	f7fc fcd5 	bl	8000108 <__gnu_thumb1_case_shi>
 800375e:	0016      	.short	0x0016
 8003760:	fff6001f 	.word	0xfff6001f
 8003764:	fff6fff6 	.word	0xfff6fff6
 8003768:	001ffff6 	.word	0x001ffff6
 800376c:	fff6fff6 	.word	0xfff6fff6
 8003770:	fff6fff6 	.word	0xfff6fff6
 8003774:	003600a1 	.word	0x003600a1
 8003778:	fff60080 	.word	0xfff60080
 800377c:	00b2fff6 	.word	0x00b2fff6
 8003780:	0036fff6 	.word	0x0036fff6
 8003784:	fff6fff6 	.word	0xfff6fff6
 8003788:	0084      	.short	0x0084
 800378a:	0025      	movs	r5, r4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	3542      	adds	r5, #66	@ 0x42
 8003790:	1d11      	adds	r1, r2, #4
 8003792:	6019      	str	r1, [r3, #0]
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	702b      	strb	r3, [r5, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	e0a0      	b.n	80038de <_printf_i+0x1c2>
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	6809      	ldr	r1, [r1, #0]
 80037a0:	1d02      	adds	r2, r0, #4
 80037a2:	060d      	lsls	r5, r1, #24
 80037a4:	d50b      	bpl.n	80037be <_printf_i+0xa2>
 80037a6:	6806      	ldr	r6, [r0, #0]
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	da03      	bge.n	80037b6 <_printf_i+0x9a>
 80037ae:	232d      	movs	r3, #45	@ 0x2d
 80037b0:	9a03      	ldr	r2, [sp, #12]
 80037b2:	4276      	negs	r6, r6
 80037b4:	7013      	strb	r3, [r2, #0]
 80037b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003930 <_printf_i+0x214>)
 80037b8:	270a      	movs	r7, #10
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	e018      	b.n	80037f0 <_printf_i+0xd4>
 80037be:	6806      	ldr	r6, [r0, #0]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	0649      	lsls	r1, r1, #25
 80037c4:	d5f1      	bpl.n	80037aa <_printf_i+0x8e>
 80037c6:	b236      	sxth	r6, r6
 80037c8:	e7ef      	b.n	80037aa <_printf_i+0x8e>
 80037ca:	6808      	ldr	r0, [r1, #0]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	c940      	ldmia	r1!, {r6}
 80037d0:	0605      	lsls	r5, r0, #24
 80037d2:	d402      	bmi.n	80037da <_printf_i+0xbe>
 80037d4:	0640      	lsls	r0, r0, #25
 80037d6:	d500      	bpl.n	80037da <_printf_i+0xbe>
 80037d8:	b2b6      	uxth	r6, r6
 80037da:	6019      	str	r1, [r3, #0]
 80037dc:	4b54      	ldr	r3, [pc, #336]	@ (8003930 <_printf_i+0x214>)
 80037de:	270a      	movs	r7, #10
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	2a6f      	cmp	r2, #111	@ 0x6f
 80037e4:	d100      	bne.n	80037e8 <_printf_i+0xcc>
 80037e6:	3f02      	subs	r7, #2
 80037e8:	0023      	movs	r3, r4
 80037ea:	2200      	movs	r2, #0
 80037ec:	3343      	adds	r3, #67	@ 0x43
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	60a3      	str	r3, [r4, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db03      	blt.n	8003800 <_printf_i+0xe4>
 80037f8:	2104      	movs	r1, #4
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	438a      	bics	r2, r1
 80037fe:	6022      	str	r2, [r4, #0]
 8003800:	2e00      	cmp	r6, #0
 8003802:	d102      	bne.n	800380a <_printf_i+0xee>
 8003804:	9d03      	ldr	r5, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <_printf_i+0x108>
 800380a:	9d03      	ldr	r5, [sp, #12]
 800380c:	0030      	movs	r0, r6
 800380e:	0039      	movs	r1, r7
 8003810:	f7fc fd0a 	bl	8000228 <__aeabi_uidivmod>
 8003814:	9b04      	ldr	r3, [sp, #16]
 8003816:	3d01      	subs	r5, #1
 8003818:	5c5b      	ldrb	r3, [r3, r1]
 800381a:	702b      	strb	r3, [r5, #0]
 800381c:	0033      	movs	r3, r6
 800381e:	0006      	movs	r6, r0
 8003820:	429f      	cmp	r7, r3
 8003822:	d9f3      	bls.n	800380c <_printf_i+0xf0>
 8003824:	2f08      	cmp	r7, #8
 8003826:	d109      	bne.n	800383c <_printf_i+0x120>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	07db      	lsls	r3, r3, #31
 800382c:	d506      	bpl.n	800383c <_printf_i+0x120>
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	6923      	ldr	r3, [r4, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	dc02      	bgt.n	800383c <_printf_i+0x120>
 8003836:	2330      	movs	r3, #48	@ 0x30
 8003838:	3d01      	subs	r5, #1
 800383a:	702b      	strb	r3, [r5, #0]
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	1b5b      	subs	r3, r3, r5
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	9b07      	ldr	r3, [sp, #28]
 8003844:	0021      	movs	r1, r4
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	9805      	ldr	r0, [sp, #20]
 800384a:	9b06      	ldr	r3, [sp, #24]
 800384c:	aa09      	add	r2, sp, #36	@ 0x24
 800384e:	f7ff fef5 	bl	800363c <_printf_common>
 8003852:	3001      	adds	r0, #1
 8003854:	d148      	bne.n	80038e8 <_printf_i+0x1cc>
 8003856:	2001      	movs	r0, #1
 8003858:	4240      	negs	r0, r0
 800385a:	b00b      	add	sp, #44	@ 0x2c
 800385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385e:	2220      	movs	r2, #32
 8003860:	6809      	ldr	r1, [r1, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	6022      	str	r2, [r4, #0]
 8003866:	2278      	movs	r2, #120	@ 0x78
 8003868:	4932      	ldr	r1, [pc, #200]	@ (8003934 <_printf_i+0x218>)
 800386a:	9104      	str	r1, [sp, #16]
 800386c:	0021      	movs	r1, r4
 800386e:	3145      	adds	r1, #69	@ 0x45
 8003870:	700a      	strb	r2, [r1, #0]
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	c940      	ldmia	r1!, {r6}
 8003878:	0610      	lsls	r0, r2, #24
 800387a:	d402      	bmi.n	8003882 <_printf_i+0x166>
 800387c:	0650      	lsls	r0, r2, #25
 800387e:	d500      	bpl.n	8003882 <_printf_i+0x166>
 8003880:	b2b6      	uxth	r6, r6
 8003882:	6019      	str	r1, [r3, #0]
 8003884:	07d3      	lsls	r3, r2, #31
 8003886:	d502      	bpl.n	800388e <_printf_i+0x172>
 8003888:	2320      	movs	r3, #32
 800388a:	4313      	orrs	r3, r2
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	2e00      	cmp	r6, #0
 8003890:	d001      	beq.n	8003896 <_printf_i+0x17a>
 8003892:	2710      	movs	r7, #16
 8003894:	e7a8      	b.n	80037e8 <_printf_i+0xcc>
 8003896:	2220      	movs	r2, #32
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	4393      	bics	r3, r2
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	e7f8      	b.n	8003892 <_printf_i+0x176>
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	680d      	ldr	r5, [r1, #0]
 80038a4:	1d10      	adds	r0, r2, #4
 80038a6:	6949      	ldr	r1, [r1, #20]
 80038a8:	6018      	str	r0, [r3, #0]
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	062e      	lsls	r6, r5, #24
 80038ae:	d501      	bpl.n	80038b4 <_printf_i+0x198>
 80038b0:	6019      	str	r1, [r3, #0]
 80038b2:	e002      	b.n	80038ba <_printf_i+0x19e>
 80038b4:	066d      	lsls	r5, r5, #25
 80038b6:	d5fb      	bpl.n	80038b0 <_printf_i+0x194>
 80038b8:	8019      	strh	r1, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9d03      	ldr	r5, [sp, #12]
 80038be:	6123      	str	r3, [r4, #16]
 80038c0:	e7bf      	b.n	8003842 <_printf_i+0x126>
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	1d11      	adds	r1, r2, #4
 80038c6:	6019      	str	r1, [r3, #0]
 80038c8:	6815      	ldr	r5, [r2, #0]
 80038ca:	2100      	movs	r1, #0
 80038cc:	0028      	movs	r0, r5
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	f000 f91c 	bl	8003b0c <memchr>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d001      	beq.n	80038dc <_printf_i+0x1c0>
 80038d8:	1b40      	subs	r0, r0, r5
 80038da:	6060      	str	r0, [r4, #4]
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9a03      	ldr	r2, [sp, #12]
 80038e4:	7013      	strb	r3, [r2, #0]
 80038e6:	e7ac      	b.n	8003842 <_printf_i+0x126>
 80038e8:	002a      	movs	r2, r5
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	9906      	ldr	r1, [sp, #24]
 80038ee:	9805      	ldr	r0, [sp, #20]
 80038f0:	9d07      	ldr	r5, [sp, #28]
 80038f2:	47a8      	blx	r5
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0ae      	beq.n	8003856 <_printf_i+0x13a>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	079b      	lsls	r3, r3, #30
 80038fc:	d415      	bmi.n	800392a <_printf_i+0x20e>
 80038fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003900:	68e0      	ldr	r0, [r4, #12]
 8003902:	4298      	cmp	r0, r3
 8003904:	daa9      	bge.n	800385a <_printf_i+0x13e>
 8003906:	0018      	movs	r0, r3
 8003908:	e7a7      	b.n	800385a <_printf_i+0x13e>
 800390a:	0022      	movs	r2, r4
 800390c:	2301      	movs	r3, #1
 800390e:	9906      	ldr	r1, [sp, #24]
 8003910:	9805      	ldr	r0, [sp, #20]
 8003912:	9e07      	ldr	r6, [sp, #28]
 8003914:	3219      	adds	r2, #25
 8003916:	47b0      	blx	r6
 8003918:	3001      	adds	r0, #1
 800391a:	d09c      	beq.n	8003856 <_printf_i+0x13a>
 800391c:	3501      	adds	r5, #1
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	42ab      	cmp	r3, r5
 8003926:	dcf0      	bgt.n	800390a <_printf_i+0x1ee>
 8003928:	e7e9      	b.n	80038fe <_printf_i+0x1e2>
 800392a:	2500      	movs	r5, #0
 800392c:	e7f7      	b.n	800391e <_printf_i+0x202>
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	08003e18 	.word	0x08003e18
 8003934:	08003e29 	.word	0x08003e29

08003938 <__swbuf_r>:
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	0006      	movs	r6, r0
 800393c:	000d      	movs	r5, r1
 800393e:	0014      	movs	r4, r2
 8003940:	2800      	cmp	r0, #0
 8003942:	d004      	beq.n	800394e <__swbuf_r+0x16>
 8003944:	6a03      	ldr	r3, [r0, #32]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <__swbuf_r+0x16>
 800394a:	f7ff fa31 	bl	8002db0 <__sinit>
 800394e:	69a3      	ldr	r3, [r4, #24]
 8003950:	60a3      	str	r3, [r4, #8]
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	d502      	bpl.n	800395e <__swbuf_r+0x26>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <__swbuf_r+0x3a>
 800395e:	0021      	movs	r1, r4
 8003960:	0030      	movs	r0, r6
 8003962:	f000 f82b 	bl	80039bc <__swsetup_r>
 8003966:	2800      	cmp	r0, #0
 8003968:	d003      	beq.n	8003972 <__swbuf_r+0x3a>
 800396a:	2501      	movs	r5, #1
 800396c:	426d      	negs	r5, r5
 800396e:	0028      	movs	r0, r5
 8003970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	b2ef      	uxtb	r7, r5
 8003978:	1ac0      	subs	r0, r0, r3
 800397a:	6963      	ldr	r3, [r4, #20]
 800397c:	b2ed      	uxtb	r5, r5
 800397e:	4283      	cmp	r3, r0
 8003980:	dc05      	bgt.n	800398e <__swbuf_r+0x56>
 8003982:	0021      	movs	r1, r4
 8003984:	0030      	movs	r0, r6
 8003986:	f7ff fcc1 	bl	800330c <_fflush_r>
 800398a:	2800      	cmp	r0, #0
 800398c:	d1ed      	bne.n	800396a <__swbuf_r+0x32>
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	3001      	adds	r0, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	60a3      	str	r3, [r4, #8]
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	701f      	strb	r7, [r3, #0]
 800399e:	6963      	ldr	r3, [r4, #20]
 80039a0:	4283      	cmp	r3, r0
 80039a2:	d004      	beq.n	80039ae <__swbuf_r+0x76>
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	07db      	lsls	r3, r3, #31
 80039a8:	d5e1      	bpl.n	800396e <__swbuf_r+0x36>
 80039aa:	2d0a      	cmp	r5, #10
 80039ac:	d1df      	bne.n	800396e <__swbuf_r+0x36>
 80039ae:	0021      	movs	r1, r4
 80039b0:	0030      	movs	r0, r6
 80039b2:	f7ff fcab 	bl	800330c <_fflush_r>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0d9      	beq.n	800396e <__swbuf_r+0x36>
 80039ba:	e7d6      	b.n	800396a <__swbuf_r+0x32>

080039bc <__swsetup_r>:
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <__swsetup_r+0xb8>)
 80039be:	b570      	push	{r4, r5, r6, lr}
 80039c0:	0005      	movs	r5, r0
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	000c      	movs	r4, r1
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d004      	beq.n	80039d4 <__swsetup_r+0x18>
 80039ca:	6a03      	ldr	r3, [r0, #32]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <__swsetup_r+0x18>
 80039d0:	f7ff f9ee 	bl	8002db0 <__sinit>
 80039d4:	230c      	movs	r3, #12
 80039d6:	5ee2      	ldrsh	r2, [r4, r3]
 80039d8:	0713      	lsls	r3, r2, #28
 80039da:	d423      	bmi.n	8003a24 <__swsetup_r+0x68>
 80039dc:	06d3      	lsls	r3, r2, #27
 80039de:	d407      	bmi.n	80039f0 <__swsetup_r+0x34>
 80039e0:	2309      	movs	r3, #9
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	2340      	movs	r3, #64	@ 0x40
 80039e6:	2001      	movs	r0, #1
 80039e8:	4313      	orrs	r3, r2
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	4240      	negs	r0, r0
 80039ee:	e03a      	b.n	8003a66 <__swsetup_r+0xaa>
 80039f0:	0752      	lsls	r2, r2, #29
 80039f2:	d513      	bpl.n	8003a1c <__swsetup_r+0x60>
 80039f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039f6:	2900      	cmp	r1, #0
 80039f8:	d008      	beq.n	8003a0c <__swsetup_r+0x50>
 80039fa:	0023      	movs	r3, r4
 80039fc:	3344      	adds	r3, #68	@ 0x44
 80039fe:	4299      	cmp	r1, r3
 8003a00:	d002      	beq.n	8003a08 <__swsetup_r+0x4c>
 8003a02:	0028      	movs	r0, r5
 8003a04:	f7ff faf6 	bl	8002ff4 <_free_r>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a0c:	2224      	movs	r2, #36	@ 0x24
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	4393      	bics	r3, r2
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	2300      	movs	r3, #0
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	6923      	ldr	r3, [r4, #16]
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	89a2      	ldrh	r2, [r4, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	81a3      	strh	r3, [r4, #12]
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <__swsetup_r+0x86>
 8003a2a:	21a0      	movs	r1, #160	@ 0xa0
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	0089      	lsls	r1, r1, #2
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	400b      	ands	r3, r1
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <__swsetup_r+0x86>
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	f000 f89b 	bl	8003b78 <__smakebuf_r>
 8003a42:	230c      	movs	r3, #12
 8003a44:	5ee2      	ldrsh	r2, [r4, r3]
 8003a46:	2101      	movs	r1, #1
 8003a48:	0013      	movs	r3, r2
 8003a4a:	400b      	ands	r3, r1
 8003a4c:	420a      	tst	r2, r1
 8003a4e:	d00b      	beq.n	8003a68 <__swsetup_r+0xac>
 8003a50:	2300      	movs	r3, #0
 8003a52:	60a3      	str	r3, [r4, #8]
 8003a54:	6963      	ldr	r3, [r4, #20]
 8003a56:	425b      	negs	r3, r3
 8003a58:	61a3      	str	r3, [r4, #24]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	4283      	cmp	r3, r0
 8003a60:	d101      	bne.n	8003a66 <__swsetup_r+0xaa>
 8003a62:	0613      	lsls	r3, r2, #24
 8003a64:	d4be      	bmi.n	80039e4 <__swsetup_r+0x28>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	0791      	lsls	r1, r2, #30
 8003a6a:	d400      	bmi.n	8003a6e <__swsetup_r+0xb2>
 8003a6c:	6963      	ldr	r3, [r4, #20]
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	e7f3      	b.n	8003a5a <__swsetup_r+0x9e>
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	20000018 	.word	0x20000018

08003a78 <_raise_r>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	0004      	movs	r4, r0
 8003a7c:	000d      	movs	r5, r1
 8003a7e:	291f      	cmp	r1, #31
 8003a80:	d904      	bls.n	8003a8c <_raise_r+0x14>
 8003a82:	2316      	movs	r3, #22
 8003a84:	6003      	str	r3, [r0, #0]
 8003a86:	2001      	movs	r0, #1
 8003a88:	4240      	negs	r0, r0
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <_raise_r+0x24>
 8003a92:	008a      	lsls	r2, r1, #2
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	d108      	bne.n	8003aae <_raise_r+0x36>
 8003a9c:	0020      	movs	r0, r4
 8003a9e:	f000 f831 	bl	8003b04 <_getpid_r>
 8003aa2:	002a      	movs	r2, r5
 8003aa4:	0001      	movs	r1, r0
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f000 f81a 	bl	8003ae0 <_kill_r>
 8003aac:	e7ed      	b.n	8003a8a <_raise_r+0x12>
 8003aae:	2a01      	cmp	r2, #1
 8003ab0:	d009      	beq.n	8003ac6 <_raise_r+0x4e>
 8003ab2:	1c51      	adds	r1, r2, #1
 8003ab4:	d103      	bne.n	8003abe <_raise_r+0x46>
 8003ab6:	2316      	movs	r3, #22
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	2001      	movs	r0, #1
 8003abc:	e7e5      	b.n	8003a8a <_raise_r+0x12>
 8003abe:	2100      	movs	r1, #0
 8003ac0:	0028      	movs	r0, r5
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	4790      	blx	r2
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	e7df      	b.n	8003a8a <_raise_r+0x12>
	...

08003acc <raise>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <raise+0x10>)
 8003ad0:	0001      	movs	r1, r0
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f7ff ffd0 	bl	8003a78 <_raise_r>
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	20000018 	.word	0x20000018

08003ae0 <_kill_r>:
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	b570      	push	{r4, r5, r6, lr}
 8003ae4:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_kill_r+0x20>)
 8003ae6:	0004      	movs	r4, r0
 8003ae8:	0008      	movs	r0, r1
 8003aea:	0011      	movs	r1, r2
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	f7fd f8ae 	bl	8000c4e <_kill>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	d103      	bne.n	8003afe <_kill_r+0x1e>
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d000      	beq.n	8003afe <_kill_r+0x1e>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	20000290 	.word	0x20000290

08003b04 <_getpid_r>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	f7fd f89c 	bl	8000c42 <_getpid>
 8003b0a:	bd10      	pop	{r4, pc}

08003b0c <memchr>:
 8003b0c:	b2c9      	uxtb	r1, r1
 8003b0e:	1882      	adds	r2, r0, r2
 8003b10:	4290      	cmp	r0, r2
 8003b12:	d101      	bne.n	8003b18 <memchr+0xc>
 8003b14:	2000      	movs	r0, #0
 8003b16:	4770      	bx	lr
 8003b18:	7803      	ldrb	r3, [r0, #0]
 8003b1a:	428b      	cmp	r3, r1
 8003b1c:	d0fb      	beq.n	8003b16 <memchr+0xa>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	e7f6      	b.n	8003b10 <memchr+0x4>
	...

08003b24 <__swhatbuf_r>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	000e      	movs	r6, r1
 8003b28:	001d      	movs	r5, r3
 8003b2a:	230e      	movs	r3, #14
 8003b2c:	5ec9      	ldrsh	r1, [r1, r3]
 8003b2e:	0014      	movs	r4, r2
 8003b30:	b096      	sub	sp, #88	@ 0x58
 8003b32:	2900      	cmp	r1, #0
 8003b34:	da0c      	bge.n	8003b50 <__swhatbuf_r+0x2c>
 8003b36:	89b2      	ldrh	r2, [r6, #12]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	4019      	ands	r1, r3
 8003b3e:	421a      	tst	r2, r3
 8003b40:	d114      	bne.n	8003b6c <__swhatbuf_r+0x48>
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	2000      	movs	r0, #0
 8003b48:	6029      	str	r1, [r5, #0]
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	b016      	add	sp, #88	@ 0x58
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	466a      	mov	r2, sp
 8003b52:	f000 f853 	bl	8003bfc <_fstat_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	dbed      	blt.n	8003b36 <__swhatbuf_r+0x12>
 8003b5a:	23f0      	movs	r3, #240	@ 0xf0
 8003b5c:	9901      	ldr	r1, [sp, #4]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	4019      	ands	r1, r3
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <__swhatbuf_r+0x50>)
 8003b64:	18c9      	adds	r1, r1, r3
 8003b66:	424b      	negs	r3, r1
 8003b68:	4159      	adcs	r1, r3
 8003b6a:	e7ea      	b.n	8003b42 <__swhatbuf_r+0x1e>
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	2340      	movs	r3, #64	@ 0x40
 8003b70:	e7e9      	b.n	8003b46 <__swhatbuf_r+0x22>
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	ffffe000 	.word	0xffffe000

08003b78 <__smakebuf_r>:
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	2602      	movs	r6, #2
 8003b7c:	898b      	ldrh	r3, [r1, #12]
 8003b7e:	0005      	movs	r5, r0
 8003b80:	000c      	movs	r4, r1
 8003b82:	b085      	sub	sp, #20
 8003b84:	4233      	tst	r3, r6
 8003b86:	d007      	beq.n	8003b98 <__smakebuf_r+0x20>
 8003b88:	0023      	movs	r3, r4
 8003b8a:	3347      	adds	r3, #71	@ 0x47
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	6123      	str	r3, [r4, #16]
 8003b90:	2301      	movs	r3, #1
 8003b92:	6163      	str	r3, [r4, #20]
 8003b94:	b005      	add	sp, #20
 8003b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	aa02      	add	r2, sp, #8
 8003b9c:	f7ff ffc2 	bl	8003b24 <__swhatbuf_r>
 8003ba0:	9f02      	ldr	r7, [sp, #8]
 8003ba2:	9001      	str	r0, [sp, #4]
 8003ba4:	0039      	movs	r1, r7
 8003ba6:	0028      	movs	r0, r5
 8003ba8:	f7ff fa9a 	bl	80030e0 <_malloc_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d108      	bne.n	8003bc2 <__smakebuf_r+0x4a>
 8003bb0:	220c      	movs	r2, #12
 8003bb2:	5ea3      	ldrsh	r3, [r4, r2]
 8003bb4:	059a      	lsls	r2, r3, #22
 8003bb6:	d4ed      	bmi.n	8003b94 <__smakebuf_r+0x1c>
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4393      	bics	r3, r2
 8003bbc:	431e      	orrs	r6, r3
 8003bbe:	81a6      	strh	r6, [r4, #12]
 8003bc0:	e7e2      	b.n	8003b88 <__smakebuf_r+0x10>
 8003bc2:	2380      	movs	r3, #128	@ 0x80
 8003bc4:	89a2      	ldrh	r2, [r4, #12]
 8003bc6:	6020      	str	r0, [r4, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	6120      	str	r0, [r4, #16]
 8003bd0:	6167      	str	r7, [r4, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <__smakebuf_r+0x78>
 8003bd6:	0028      	movs	r0, r5
 8003bd8:	230e      	movs	r3, #14
 8003bda:	5ee1      	ldrsh	r1, [r4, r3]
 8003bdc:	f000 f820 	bl	8003c20 <_isatty_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <__smakebuf_r+0x78>
 8003be4:	2303      	movs	r3, #3
 8003be6:	89a2      	ldrh	r2, [r4, #12]
 8003be8:	439a      	bics	r2, r3
 8003bea:	3b02      	subs	r3, #2
 8003bec:	4313      	orrs	r3, r2
 8003bee:	81a3      	strh	r3, [r4, #12]
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	9a01      	ldr	r2, [sp, #4]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	e7cc      	b.n	8003b94 <__smakebuf_r+0x1c>
	...

08003bfc <_fstat_r>:
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	b570      	push	{r4, r5, r6, lr}
 8003c00:	4d06      	ldr	r5, [pc, #24]	@ (8003c1c <_fstat_r+0x20>)
 8003c02:	0004      	movs	r4, r0
 8003c04:	0008      	movs	r0, r1
 8003c06:	0011      	movs	r1, r2
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f7fd f880 	bl	8000d0e <_fstat>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d103      	bne.n	8003c1a <_fstat_r+0x1e>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d000      	beq.n	8003c1a <_fstat_r+0x1e>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	20000290 	.word	0x20000290

08003c20 <_isatty_r>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	4d06      	ldr	r5, [pc, #24]	@ (8003c40 <_isatty_r+0x20>)
 8003c26:	0004      	movs	r4, r0
 8003c28:	0008      	movs	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fd f87d 	bl	8000d2a <_isatty>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d103      	bne.n	8003c3c <_isatty_r+0x1c>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d000      	beq.n	8003c3c <_isatty_r+0x1c>
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	20000290 	.word	0x20000290

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
